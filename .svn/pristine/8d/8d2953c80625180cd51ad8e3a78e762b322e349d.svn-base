-- =====================================================
-- Autor: Departamento de Sistemas - #EMPRESA#
-- Creado en la fecha: Mar  1 2019  1:44PM
-- Nombre del Script: DB_XXX__13b_Core__Listados Generados Automaticamente
-- =====================================================
 
USE DB_XXX
GO
 
-- =====================================================
-- SP: STORE PROCEDURES // DB_XXX__13b_Core__Listados Generados Automaticamente // INICIO
-- -------------------------
 
 
		-- Tablas Involucradas: - INICIO
			-- Actores
			-- Contactos
			-- CuentasDeEnvios
			-- Dispositivos
			-- EnviosDeCorreos
			-- EstadosDeLogErrores
			-- EstadosDeSoportes
			-- EstadosDeTareas
			-- ExtensionesDeArchivos
			-- FuncionesDePaginas
			-- Iconos
			-- IconosCSS
			-- ImportanciasDeTareas
			-- LogEnviosDeCorreos
			-- LogLogins
			-- Notificaciones
			-- ParametrosDelSistema
			-- PrioridadesDeSoportes
			-- Publicaciones
			-- RelAsig_Contactos_A_GruposDeContactos
			-- RelAsig_Contactos_A_TiposDeContactos
			-- RelAsig_CuentasDeEnvios_A_Tablas
			-- RelAsig_Subsistemas_A_Publicaciones
			-- RelAsig_TiposDeContactos_A_Contextos
			-- Subsistemas
			-- TiposDeActores
			-- TiposDeArchivos
			-- TiposDeContactos
			-- TiposDeLogLogins
			-- TiposDeOperaciones
			-- TiposDeTareas
			-- Unidades
		-- Tablas Involucradas: - FIN
 
 
 
 
-- SP-TABLA: Actores /Listados/ - INICIO
IF (OBJECT_ID('usp_Actores__Listado') IS NOT NULL) DROP PROCEDURE usp_Actores__Listado
GO
CREATE PROCEDURE usp_Actores__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
	,@TipoDeActorId                                 INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'Actores'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT ACT.id
					,ACT.ContextoId
					,ACT.TipoDeActorId
					,ACT.Codigo
					,ACT.Nombre
					,ACT.Email
					,ACT.Email2
					,ACT.Telefono
					,ACT.Telefono2
					,ACT.Direccion
					,ACT.Observaciones
					,ACT.Activo
					,N'images/cbx/img_' + CONVERT(VARCHAR(5),ACT.Activo) + N'.jpg' AS imgActivo
					,CAST(CX.Nombre AS VARCHAR) AS Contexto
					,CAST(TDA.Nombre AS VARCHAR) AS TipoDeActor
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN ACT.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN ACT.id END DESC
							,CASE WHEN @OrdenarPor = 'ContextoId' AND @Sentido = '0' THEN ACT.ContextoId END
							,CASE WHEN @OrdenarPor = 'ContextoId' AND @Sentido = '1' THEN ACT.ContextoId END DESC
							,CASE WHEN @OrdenarPor = 'TipoDeActorId' AND @Sentido = '0' THEN ACT.TipoDeActorId END
							,CASE WHEN @OrdenarPor = 'TipoDeActorId' AND @Sentido = '1' THEN ACT.TipoDeActorId END DESC
							,CASE WHEN @OrdenarPor = 'Codigo' AND @Sentido = '0' THEN ACT.Codigo END
							,CASE WHEN @OrdenarPor = 'Codigo' AND @Sentido = '1' THEN ACT.Codigo END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN ACT.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN ACT.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Email' AND @Sentido = '0' THEN ACT.Email END
							,CASE WHEN @OrdenarPor = 'Email' AND @Sentido = '1' THEN ACT.Email END DESC
							,CASE WHEN @OrdenarPor = 'Email2' AND @Sentido = '0' THEN ACT.Email2 END
							,CASE WHEN @OrdenarPor = 'Email2' AND @Sentido = '1' THEN ACT.Email2 END DESC
							,CASE WHEN @OrdenarPor = 'Telefono' AND @Sentido = '0' THEN ACT.Telefono END
							,CASE WHEN @OrdenarPor = 'Telefono' AND @Sentido = '1' THEN ACT.Telefono END DESC
							,CASE WHEN @OrdenarPor = 'Telefono2' AND @Sentido = '0' THEN ACT.Telefono2 END
							,CASE WHEN @OrdenarPor = 'Telefono2' AND @Sentido = '1' THEN ACT.Telefono2 END DESC
							,CASE WHEN @OrdenarPor = 'Direccion' AND @Sentido = '0' THEN ACT.Direccion END
							,CASE WHEN @OrdenarPor = 'Direccion' AND @Sentido = '1' THEN ACT.Direccion END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN ACT.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN ACT.Observaciones END DESC
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '0' THEN ACT.Activo END
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '1' THEN ACT.Activo END DESC
							,CASE WHEN @OrdenarPor = 'Contexto' AND @Sentido = '0' THEN CX.Nombre END
							,CASE WHEN @OrdenarPor = 'Contexto' AND @Sentido = '1' THEN CX.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'TipoDeActor' AND @Sentido = '0' THEN TDA.Nombre END
							,CASE WHEN @OrdenarPor = 'TipoDeActor' AND @Sentido = '1' THEN TDA.Nombre END DESC
					) AS NumeroDeRegistro
			FROM Actores AS ACT
				INNER JOIN Contextos CX ON CX.id = ACT.ContextoId
				INNER JOIN TiposDeActores TDA ON TDA.id = ACT.TipoDeActorId
			WHERE
				(ACT.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (ACT.TipoDeActorId = @TipoDeActorId OR @TipoDeActorId = '-1') -- VERIFICAR ESTE CAMPO
				AND (ACT.Activo = @Activo OR @Activo IS NULL)
				AND (ACT.ContextoId = @ContextoId OR @ContextoId = '-1')
				AND
				(
					(@Filtro = '')
					OR (ACT.TipoDeActorId LIKE '%' + @Filtro + '%')
					OR (ACT.Codigo LIKE '%' + @Filtro + '%')
					OR (ACT.Nombre LIKE '%' + @Filtro + '%')
					OR (ACT.Email LIKE '%' + @Filtro + '%')
					OR (ACT.Email2 LIKE '%' + @Filtro + '%')
					OR (ACT.Telefono LIKE '%' + @Filtro + '%')
					OR (ACT.Telefono2 LIKE '%' + @Filtro + '%')
					OR (ACT.Direccion LIKE '%' + @Filtro + '%')
					OR (ACT.Observaciones LIKE '%' + @Filtro + '%')
					OR (CX.Nombre LIKE '%' + @Filtro + '%')
					OR (TDA.Nombre LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_Actores__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_Actores__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_Actores__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
	,@TipoDeActorId                                 INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'Actores'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT ACT.id
					,ACT.Nombre
			FROM Actores AS ACT
			WHERE
				(ACT.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (ACT.TipoDeActorId = @TipoDeActorId OR @TipoDeActorId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (ACT.Activo = @Activo OR @Activo IS NULL)
					 AND (ACT.ContextoId = @ContextoId OR @ContextoId = '-1')
				)
				AND (
					(@Filtro = '')
					OR (ACT.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY ACT.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: Actores /Listados/ - FIN
 
 
 
 
-- SP-TABLA: Contactos /Listados/ - INICIO
IF (OBJECT_ID('usp_Contactos__Listado') IS NOT NULL) DROP PROCEDURE usp_Contactos__Listado
GO
CREATE PROCEDURE usp_Contactos__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'Contactos'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT CTOS.id
					,CTOS.ContextoId
					,CTOS.EsUnaOrganizacion
					,CTOS.NombreCompleto
					,CTOS.Alias
					,CTOS.Organizacion
					,CTOS.RelacionConElContacto
					,CTOS.Email
					,CTOS.Email2
					,CTOS.Telefono
					,CTOS.Telefono2
					,CTOS.Direccion
					,CTOS.Url
					,CTOS.Observaciones
					,CAST(CX.Nombre AS VARCHAR) AS Contexto
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN CTOS.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN CTOS.id END DESC
							,CASE WHEN @OrdenarPor = 'ContextoId' AND @Sentido = '0' THEN CTOS.ContextoId END
							,CASE WHEN @OrdenarPor = 'ContextoId' AND @Sentido = '1' THEN CTOS.ContextoId END DESC
							,CASE WHEN @OrdenarPor = 'EsUnaOrganizacion' AND @Sentido = '0' THEN CTOS.EsUnaOrganizacion END
							,CASE WHEN @OrdenarPor = 'EsUnaOrganizacion' AND @Sentido = '1' THEN CTOS.EsUnaOrganizacion END DESC
							,CASE WHEN @OrdenarPor = 'NombreCompleto' AND @Sentido = '0' THEN CTOS.NombreCompleto END
							,CASE WHEN @OrdenarPor = 'NombreCompleto' AND @Sentido = '1' THEN CTOS.NombreCompleto END DESC
							,CASE WHEN @OrdenarPor = 'Alias' AND @Sentido = '0' THEN CTOS.Alias END
							,CASE WHEN @OrdenarPor = 'Alias' AND @Sentido = '1' THEN CTOS.Alias END DESC
							,CASE WHEN @OrdenarPor = 'Organizacion' AND @Sentido = '0' THEN CTOS.Organizacion END
							,CASE WHEN @OrdenarPor = 'Organizacion' AND @Sentido = '1' THEN CTOS.Organizacion END DESC
							,CASE WHEN @OrdenarPor = 'RelacionConElContacto' AND @Sentido = '0' THEN CTOS.RelacionConElContacto END
							,CASE WHEN @OrdenarPor = 'RelacionConElContacto' AND @Sentido = '1' THEN CTOS.RelacionConElContacto END DESC
							,CASE WHEN @OrdenarPor = 'Email' AND @Sentido = '0' THEN CTOS.Email END
							,CASE WHEN @OrdenarPor = 'Email' AND @Sentido = '1' THEN CTOS.Email END DESC
							,CASE WHEN @OrdenarPor = 'Email2' AND @Sentido = '0' THEN CTOS.Email2 END
							,CASE WHEN @OrdenarPor = 'Email2' AND @Sentido = '1' THEN CTOS.Email2 END DESC
							,CASE WHEN @OrdenarPor = 'Telefono' AND @Sentido = '0' THEN CTOS.Telefono END
							,CASE WHEN @OrdenarPor = 'Telefono' AND @Sentido = '1' THEN CTOS.Telefono END DESC
							,CASE WHEN @OrdenarPor = 'Telefono2' AND @Sentido = '0' THEN CTOS.Telefono2 END
							,CASE WHEN @OrdenarPor = 'Telefono2' AND @Sentido = '1' THEN CTOS.Telefono2 END DESC
							,CASE WHEN @OrdenarPor = 'Direccion' AND @Sentido = '0' THEN CTOS.Direccion END
							,CASE WHEN @OrdenarPor = 'Direccion' AND @Sentido = '1' THEN CTOS.Direccion END DESC
							,CASE WHEN @OrdenarPor = 'Url' AND @Sentido = '0' THEN CTOS.Url END
							,CASE WHEN @OrdenarPor = 'Url' AND @Sentido = '1' THEN CTOS.Url END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN CTOS.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN CTOS.Observaciones END DESC
							,CASE WHEN @OrdenarPor = 'Contexto' AND @Sentido = '0' THEN CX.Nombre END
							,CASE WHEN @OrdenarPor = 'Contexto' AND @Sentido = '1' THEN CX.Nombre END DESC
					) AS NumeroDeRegistro
			FROM Contactos AS CTOS
				INNER JOIN Contextos CX ON CX.id = CTOS.ContextoId
			WHERE
				(CTOS.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (CTOS.ContextoId = @ContextoId OR @ContextoId = '-1')
				AND
				(
					(@Filtro = '')
					OR (CTOS.EsUnaOrganizacion LIKE '%' + @Filtro + '%')
					OR (CTOS.NombreCompleto LIKE '%' + @Filtro + '%')
					OR (CTOS.Alias LIKE '%' + @Filtro + '%')
					OR (CTOS.Organizacion LIKE '%' + @Filtro + '%')
					OR (CTOS.RelacionConElContacto LIKE '%' + @Filtro + '%')
					OR (CTOS.Email LIKE '%' + @Filtro + '%')
					OR (CTOS.Email2 LIKE '%' + @Filtro + '%')
					OR (CTOS.Telefono LIKE '%' + @Filtro + '%')
					OR (CTOS.Telefono2 LIKE '%' + @Filtro + '%')
					OR (CTOS.Direccion LIKE '%' + @Filtro + '%')
					OR (CTOS.Url LIKE '%' + @Filtro + '%')
					OR (CTOS.Observaciones LIKE '%' + @Filtro + '%')
					OR (CX.Nombre LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_Contactos__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_Contactos__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_Contactos__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'Contactos'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT CTOS.id
					,CTOS.NombreCompleto
			FROM Contactos AS CTOS
			WHERE
				(CTOS.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (CTOS.ContextoId = @ContextoId OR @ContextoId = '-1')
				)
				AND (
					(@Filtro = '')
					OR (CTOS.NombreCompleto LIKE '%' + @Filtro + '%')
				)
			ORDER BY CTOS.NombreCompleto
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: Contactos /Listados/ - FIN
 
 
 
 
-- SP-TABLA: CuentasDeEnvios /Listados/ - INICIO
IF (OBJECT_ID('usp_CuentasDeEnvios__Listado') IS NOT NULL) DROP PROCEDURE usp_CuentasDeEnvios__Listado
GO
CREATE PROCEDURE usp_CuentasDeEnvios__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'CuentasDeEnvios'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT CDE.id
					,CDE.Nombre
					,CDE.CuentaDeEmail
					,CDE.PwdDeEmail
					,CDE.Smtp
					,CDE.Puerto
					,CDE.Observaciones
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN CDE.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN CDE.id END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN CDE.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN CDE.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'CuentaDeEmail' AND @Sentido = '0' THEN CDE.CuentaDeEmail END
							,CASE WHEN @OrdenarPor = 'CuentaDeEmail' AND @Sentido = '1' THEN CDE.CuentaDeEmail END DESC
							,CASE WHEN @OrdenarPor = 'PwdDeEmail' AND @Sentido = '0' THEN CDE.PwdDeEmail END
							,CASE WHEN @OrdenarPor = 'PwdDeEmail' AND @Sentido = '1' THEN CDE.PwdDeEmail END DESC
							,CASE WHEN @OrdenarPor = 'Smtp' AND @Sentido = '0' THEN CDE.Smtp END
							,CASE WHEN @OrdenarPor = 'Smtp' AND @Sentido = '1' THEN CDE.Smtp END DESC
							,CASE WHEN @OrdenarPor = 'Puerto' AND @Sentido = '0' THEN CDE.Puerto END
							,CASE WHEN @OrdenarPor = 'Puerto' AND @Sentido = '1' THEN CDE.Puerto END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN CDE.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN CDE.Observaciones END DESC
					) AS NumeroDeRegistro
			FROM CuentasDeEnvios AS CDE
			WHERE
				(CDE.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND
				(
					(@Filtro = '')
					OR (CDE.Nombre LIKE '%' + @Filtro + '%')
					OR (CDE.CuentaDeEmail LIKE '%' + @Filtro + '%')
					OR (CDE.PwdDeEmail LIKE '%' + @Filtro + '%')
					OR (CDE.Smtp LIKE '%' + @Filtro + '%')
					OR (CDE.Puerto LIKE '%' + @Filtro + '%')
					OR (CDE.Observaciones LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_CuentasDeEnvios__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_CuentasDeEnvios__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_CuentasDeEnvios__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'CuentasDeEnvios'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT CDE.id
					,CDE.Nombre
			FROM CuentasDeEnvios AS CDE
			WHERE
				(CDE.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
				)
				AND (
					(@Filtro = '')
					OR (CDE.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY CDE.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: CuentasDeEnvios /Listados/ - FIN
 
 
 
 
-- SP-TABLA: Dispositivos /Listados/ - INICIO
IF (OBJECT_ID('usp_Dispositivos__Listado') IS NOT NULL) DROP PROCEDURE usp_Dispositivos__Listado
GO
CREATE PROCEDURE usp_Dispositivos__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
	,@AsignadoAUsuarioId                            INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'Dispositivos'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT DISP.id
					,DISP.AsignadoAUsuarioId
					,DISP.MachineName
					,DISP.OSVersion
					,DISP.UserMachineName
					,DISP.ClavePrivada
					,DISP.ClavePrivadaEntregada
					,DISP.ClavePrivadaFechaEntrega
					,DISP.Observaciones
					,DISP.Activo
					,N'images/cbx/img_' + CONVERT(VARCHAR(5),DISP.Activo) + N'.jpg' AS imgActivo
					,U.Apellido + ', ' + U.Nombre AS AsignadoAUsuario
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN DISP.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN DISP.id END DESC
							,CASE WHEN @OrdenarPor = 'AsignadoAUsuarioId' AND @Sentido = '0' THEN DISP.AsignadoAUsuarioId END
							,CASE WHEN @OrdenarPor = 'AsignadoAUsuarioId' AND @Sentido = '1' THEN DISP.AsignadoAUsuarioId END DESC
							,CASE WHEN @OrdenarPor = 'MachineName' AND @Sentido = '0' THEN DISP.MachineName END
							,CASE WHEN @OrdenarPor = 'MachineName' AND @Sentido = '1' THEN DISP.MachineName END DESC
							,CASE WHEN @OrdenarPor = 'OSVersion' AND @Sentido = '0' THEN DISP.OSVersion END
							,CASE WHEN @OrdenarPor = 'OSVersion' AND @Sentido = '1' THEN DISP.OSVersion END DESC
							,CASE WHEN @OrdenarPor = 'UserMachineName' AND @Sentido = '0' THEN DISP.UserMachineName END
							,CASE WHEN @OrdenarPor = 'UserMachineName' AND @Sentido = '1' THEN DISP.UserMachineName END DESC
							,CASE WHEN @OrdenarPor = 'ClavePrivada' AND @Sentido = '0' THEN DISP.ClavePrivada END
							,CASE WHEN @OrdenarPor = 'ClavePrivada' AND @Sentido = '1' THEN DISP.ClavePrivada END DESC
							,CASE WHEN @OrdenarPor = 'ClavePrivadaEntregada' AND @Sentido = '0' THEN DISP.ClavePrivadaEntregada END
							,CASE WHEN @OrdenarPor = 'ClavePrivadaEntregada' AND @Sentido = '1' THEN DISP.ClavePrivadaEntregada END DESC
							,CASE WHEN @OrdenarPor = 'ClavePrivadaFechaEntrega' AND @Sentido = '0' THEN DISP.ClavePrivadaFechaEntrega END
							,CASE WHEN @OrdenarPor = 'ClavePrivadaFechaEntrega' AND @Sentido = '1' THEN DISP.ClavePrivadaFechaEntrega END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN DISP.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN DISP.Observaciones END DESC
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '0' THEN DISP.Activo END
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '1' THEN DISP.Activo END DESC
							,CASE WHEN @OrdenarPor = 'AsignadoAUsuario' AND @Sentido = '0' THEN U.Apellido END
							,CASE WHEN @OrdenarPor = 'AsignadoAUsuario' AND @Sentido = '0' THEN U.Nombre END
							,CASE WHEN @OrdenarPor = 'AsignadoAUsuario' AND @Sentido = '1' THEN U.Apellido END DESC
							,CASE WHEN @OrdenarPor = 'AsignadoAUsuario' AND @Sentido = '1' THEN U.Nombre END DESC
					) AS NumeroDeRegistro
			FROM Dispositivos AS DISP
				INNER JOIN Usuarios U ON U.id = DISP.AsignadoAUsuarioId
			WHERE
				(DISP.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (DISP.AsignadoAUsuarioId = @AsignadoAUsuarioId OR @AsignadoAUsuarioId = '-1') -- VERIFICAR ESTE CAMPO
				AND (DISP.Activo = @Activo OR @Activo IS NULL)
				AND
				(
					(@Filtro = '')
					OR (DISP.AsignadoAUsuarioId LIKE '%' + @Filtro + '%')
					OR (DISP.MachineName LIKE '%' + @Filtro + '%')
					OR (DISP.OSVersion LIKE '%' + @Filtro + '%')
					OR (DISP.UserMachineName LIKE '%' + @Filtro + '%')
					OR (DISP.ClavePrivada LIKE '%' + @Filtro + '%')
					OR (DISP.ClavePrivadaEntregada LIKE '%' + @Filtro + '%')
					OR (DISP.ClavePrivadaFechaEntrega LIKE '%' + @Filtro + '%')
					OR (DISP.Observaciones LIKE '%' + @Filtro + '%')
					OR (U.Apellido LIKE '%' + @Filtro + '%')
					OR (U.Nombre LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_Dispositivos__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_Dispositivos__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_Dispositivos__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
	,@AsignadoAUsuarioId                            INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'Dispositivos'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT DISP.id
					,DISP.UserMachineName
			FROM Dispositivos AS DISP
			WHERE
				(DISP.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (DISP.AsignadoAUsuarioId = @AsignadoAUsuarioId OR @AsignadoAUsuarioId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (DISP.Activo = @Activo OR @Activo IS NULL)
				)
				AND (
					(@Filtro = '')
					OR (DISP.UserMachineName LIKE '%' + @Filtro + '%')
				)
			ORDER BY DISP.UserMachineName
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: Dispositivos /Listados/ - FIN
 
 
 
 
-- SP-TABLA: EnviosDeCorreos /Listados/ - INICIO
IF (OBJECT_ID('usp_EnviosDeCorreos__Listado') IS NOT NULL) DROP PROCEDURE usp_EnviosDeCorreos__Listado
GO
CREATE PROCEDURE usp_EnviosDeCorreos__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@TablaId                                       INT = '-1' -- VERIFICAR ESTE CAMPO
	,@UsuarioOriginanteId                           INT = '-1' -- VERIFICAR ESTE CAMPO
	,@UsuarioDestinatarioId                         INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'EnviosDeCorreos'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT EDC.id
					,EDC.UsuarioOriginanteId
					,EDC.UsuarioDestinatarioId
					,EDC.TablaId
					,EDC.RegistroId
					,EDC.EmailDeDestino
					,EDC.Asunto
					,EDC.Contenido
					,EDC.FechaPactadaDeEnvio
					,CAST(T.Nombre AS VARCHAR) AS Tabla
					,U.Apellido + ', ' + U.Nombre AS UsuarioOriginante
					,U3.Apellido + ', ' + U3.Nombre AS UsuarioDestinatario
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN EDC.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN EDC.id END DESC
							,CASE WHEN @OrdenarPor = 'UsuarioOriginanteId' AND @Sentido = '0' THEN EDC.UsuarioOriginanteId END
							,CASE WHEN @OrdenarPor = 'UsuarioOriginanteId' AND @Sentido = '1' THEN EDC.UsuarioOriginanteId END DESC
							,CASE WHEN @OrdenarPor = 'UsuarioDestinatarioId' AND @Sentido = '0' THEN EDC.UsuarioDestinatarioId END
							,CASE WHEN @OrdenarPor = 'UsuarioDestinatarioId' AND @Sentido = '1' THEN EDC.UsuarioDestinatarioId END DESC
							,CASE WHEN @OrdenarPor = 'TablaId' AND @Sentido = '0' THEN EDC.TablaId END
							,CASE WHEN @OrdenarPor = 'TablaId' AND @Sentido = '1' THEN EDC.TablaId END DESC
							,CASE WHEN @OrdenarPor = 'RegistroId' AND @Sentido = '0' THEN EDC.RegistroId END
							,CASE WHEN @OrdenarPor = 'RegistroId' AND @Sentido = '1' THEN EDC.RegistroId END DESC
							,CASE WHEN @OrdenarPor = 'EmailDeDestino' AND @Sentido = '0' THEN EDC.EmailDeDestino END
							,CASE WHEN @OrdenarPor = 'EmailDeDestino' AND @Sentido = '1' THEN EDC.EmailDeDestino END DESC
							,CASE WHEN @OrdenarPor = 'Asunto' AND @Sentido = '0' THEN EDC.Asunto END
							,CASE WHEN @OrdenarPor = 'Asunto' AND @Sentido = '1' THEN EDC.Asunto END DESC
							,CASE WHEN @OrdenarPor = 'Contenido' AND @Sentido = '0' THEN EDC.Contenido END
							,CASE WHEN @OrdenarPor = 'Contenido' AND @Sentido = '1' THEN EDC.Contenido END DESC
							,CASE WHEN @OrdenarPor = 'FechaPactadaDeEnvio' AND @Sentido = '0' THEN EDC.FechaPactadaDeEnvio END
							,CASE WHEN @OrdenarPor = 'FechaPactadaDeEnvio' AND @Sentido = '1' THEN EDC.FechaPactadaDeEnvio END DESC
							,CASE WHEN @OrdenarPor = 'Tabla' AND @Sentido = '0' THEN T.Nombre END
							,CASE WHEN @OrdenarPor = 'Tabla' AND @Sentido = '1' THEN T.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'UsuarioOriginante' AND @Sentido = '0' THEN U.Apellido END
							,CASE WHEN @OrdenarPor = 'UsuarioOriginante' AND @Sentido = '0' THEN U.Nombre END
							,CASE WHEN @OrdenarPor = 'UsuarioOriginante' AND @Sentido = '1' THEN U.Apellido END DESC
							,CASE WHEN @OrdenarPor = 'UsuarioOriginante' AND @Sentido = '1' THEN U.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'UsuarioDestinatario' AND @Sentido = '0' THEN U3.Apellido END
							,CASE WHEN @OrdenarPor = 'UsuarioDestinatario' AND @Sentido = '0' THEN U3.Nombre END
							,CASE WHEN @OrdenarPor = 'UsuarioDestinatario' AND @Sentido = '1' THEN U3.Apellido END DESC
							,CASE WHEN @OrdenarPor = 'UsuarioDestinatario' AND @Sentido = '1' THEN U3.Nombre END DESC
					) AS NumeroDeRegistro
			FROM EnviosDeCorreos AS EDC
				INNER JOIN Tablas T ON T.id = EDC.TablaId
				INNER JOIN Usuarios U ON U.id = EDC.UsuarioOriginanteId
				INNER JOIN Usuarios U3 ON U3.id = EDC.UsuarioDestinatarioId
			WHERE
				(EDC.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (EDC.TablaId = @TablaId OR @TablaId = '-1') -- VERIFICAR ESTE CAMPO
				AND (EDC.UsuarioOriginanteId = @UsuarioOriginanteId OR @UsuarioOriginanteId = '-1') -- VERIFICAR ESTE CAMPO
				AND (EDC.UsuarioDestinatarioId = @UsuarioDestinatarioId OR @UsuarioDestinatarioId = '-1') -- VERIFICAR ESTE CAMPO
				AND
				(
					(@Filtro = '')
					OR (EDC.UsuarioOriginanteId LIKE '%' + @Filtro + '%')
					OR (EDC.UsuarioDestinatarioId LIKE '%' + @Filtro + '%')
					OR (EDC.TablaId LIKE '%' + @Filtro + '%')
					OR (EDC.RegistroId LIKE '%' + @Filtro + '%')
					OR (EDC.EmailDeDestino LIKE '%' + @Filtro + '%')
					OR (EDC.Asunto LIKE '%' + @Filtro + '%')
					OR (EDC.Contenido LIKE '%' + @Filtro + '%')
					OR (EDC.FechaPactadaDeEnvio LIKE '%' + @Filtro + '%')
					OR (T.Nombre LIKE '%' + @Filtro + '%')
					OR (U.Apellido LIKE '%' + @Filtro + '%')
					OR (U.Nombre LIKE '%' + @Filtro + '%')
					OR (U3.Apellido LIKE '%' + @Filtro + '%')
					OR (U3.Nombre LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_EnviosDeCorreos__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_EnviosDeCorreos__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_EnviosDeCorreos__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@TablaId                                       INT = '-1' -- VERIFICAR ESTE CAMPO
	,@UsuarioOriginanteId                           INT = '-1' -- VERIFICAR ESTE CAMPO
	,@UsuarioDestinatarioId                         INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'EnviosDeCorreos'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT EDC.id
					,EDC.Asunto
			FROM EnviosDeCorreos AS EDC
			WHERE
				(EDC.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (EDC.TablaId = @TablaId OR @TablaId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (EDC.UsuarioOriginanteId = @UsuarioOriginanteId OR @UsuarioOriginanteId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (EDC.UsuarioDestinatarioId = @UsuarioDestinatarioId OR @UsuarioDestinatarioId = '-1') -- VERIFICAR ESTE CAMPO
				)
				AND (
					(@Filtro = '')
					OR (EDC.Asunto LIKE '%' + @Filtro + '%')
				)
			ORDER BY EDC.Asunto
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: EnviosDeCorreos /Listados/ - FIN
 
 
 
 
-- SP-TABLA: EstadosDeLogErrores /Listados/ - INICIO
IF (OBJECT_ID('usp_EstadosDeLogErrores__Listado') IS NOT NULL) DROP PROCEDURE usp_EstadosDeLogErrores__Listado
GO
CREATE PROCEDURE usp_EstadosDeLogErrores__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'EstadosDeLogErrores'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT EDLE.id
					,EDLE.Nombre
					,EDLE.Nomenclatura
					,EDLE.Orden
					,EDLE.Observaciones
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN EDLE.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN EDLE.id END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN EDLE.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN EDLE.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Nomenclatura' AND @Sentido = '0' THEN EDLE.Nomenclatura END
							,CASE WHEN @OrdenarPor = 'Nomenclatura' AND @Sentido = '1' THEN EDLE.Nomenclatura END DESC
							,CASE WHEN @OrdenarPor = 'Orden' AND @Sentido = '0' THEN EDLE.Orden END
							,CASE WHEN @OrdenarPor = 'Orden' AND @Sentido = '1' THEN EDLE.Orden END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN EDLE.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN EDLE.Observaciones END DESC
					) AS NumeroDeRegistro
			FROM EstadosDeLogErrores AS EDLE
			WHERE
				(EDLE.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND
				(
					(@Filtro = '')
					OR (EDLE.Nombre LIKE '%' + @Filtro + '%')
					OR (EDLE.Nomenclatura LIKE '%' + @Filtro + '%')
					OR (EDLE.Orden LIKE '%' + @Filtro + '%')
					OR (EDLE.Observaciones LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_EstadosDeLogErrores__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_EstadosDeLogErrores__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_EstadosDeLogErrores__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'EstadosDeLogErrores'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT EDLE.id
					,EDLE.Nombre
			FROM EstadosDeLogErrores AS EDLE
			WHERE
				(EDLE.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
				)
				AND (
					(@Filtro = '')
					OR (EDLE.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY EDLE.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: EstadosDeLogErrores /Listados/ - FIN
 
 
 
 
-- SP-TABLA: EstadosDeSoportes /Listados/ - INICIO
IF (OBJECT_ID('usp_EstadosDeSoportes__Listado') IS NOT NULL) DROP PROCEDURE usp_EstadosDeSoportes__Listado
GO
CREATE PROCEDURE usp_EstadosDeSoportes__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'EstadosDeSoportes'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT EDS.id
					,EDS.Nombre
					,EDS.Nomenclatura
					,EDS.Orden
					,EDS.Observaciones
					,EDS.CierraSoporte
					,EDS.Activo
					,N'images/cbx/img_' + CONVERT(VARCHAR(5),EDS.Activo) + N'.jpg' AS imgActivo
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN EDS.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN EDS.id END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN EDS.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN EDS.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Nomenclatura' AND @Sentido = '0' THEN EDS.Nomenclatura END
							,CASE WHEN @OrdenarPor = 'Nomenclatura' AND @Sentido = '1' THEN EDS.Nomenclatura END DESC
							,CASE WHEN @OrdenarPor = 'Orden' AND @Sentido = '0' THEN EDS.Orden END
							,CASE WHEN @OrdenarPor = 'Orden' AND @Sentido = '1' THEN EDS.Orden END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN EDS.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN EDS.Observaciones END DESC
							,CASE WHEN @OrdenarPor = 'CierraSoporte' AND @Sentido = '0' THEN EDS.CierraSoporte END
							,CASE WHEN @OrdenarPor = 'CierraSoporte' AND @Sentido = '1' THEN EDS.CierraSoporte END DESC
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '0' THEN EDS.Activo END
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '1' THEN EDS.Activo END DESC
					) AS NumeroDeRegistro
			FROM EstadosDeSoportes AS EDS
			WHERE
				(EDS.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (EDS.Activo = @Activo OR @Activo IS NULL)
				AND
				(
					(@Filtro = '')
					OR (EDS.Nombre LIKE '%' + @Filtro + '%')
					OR (EDS.Nomenclatura LIKE '%' + @Filtro + '%')
					OR (EDS.Orden LIKE '%' + @Filtro + '%')
					OR (EDS.Observaciones LIKE '%' + @Filtro + '%')
					OR (EDS.CierraSoporte LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_EstadosDeSoportes__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_EstadosDeSoportes__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_EstadosDeSoportes__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'EstadosDeSoportes'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT EDS.id
					,EDS.Nombre
			FROM EstadosDeSoportes AS EDS
			WHERE
				(EDS.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (EDS.Activo = @Activo OR @Activo IS NULL)
				)
				AND (
					(@Filtro = '')
					OR (EDS.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY EDS.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: EstadosDeSoportes /Listados/ - FIN
 
 
 
 
-- SP-TABLA: EstadosDeTareas /Listados/ - INICIO
IF (OBJECT_ID('usp_EstadosDeTareas__Listado') IS NOT NULL) DROP PROCEDURE usp_EstadosDeTareas__Listado
GO
CREATE PROCEDURE usp_EstadosDeTareas__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'EstadosDeTareas'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT EDT.id
					,EDT.Nombre
					,EDT.Nomenclatura
					,EDT.Orden
					,EDT.Observaciones
					,EDT.Activo
					,N'images/cbx/img_' + CONVERT(VARCHAR(5),EDT.Activo) + N'.jpg' AS imgActivo
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN EDT.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN EDT.id END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN EDT.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN EDT.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Nomenclatura' AND @Sentido = '0' THEN EDT.Nomenclatura END
							,CASE WHEN @OrdenarPor = 'Nomenclatura' AND @Sentido = '1' THEN EDT.Nomenclatura END DESC
							,CASE WHEN @OrdenarPor = 'Orden' AND @Sentido = '0' THEN EDT.Orden END
							,CASE WHEN @OrdenarPor = 'Orden' AND @Sentido = '1' THEN EDT.Orden END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN EDT.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN EDT.Observaciones END DESC
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '0' THEN EDT.Activo END
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '1' THEN EDT.Activo END DESC
					) AS NumeroDeRegistro
			FROM EstadosDeTareas AS EDT
			WHERE
				(EDT.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (EDT.Activo = @Activo OR @Activo IS NULL)
				AND
				(
					(@Filtro = '')
					OR (EDT.Nombre LIKE '%' + @Filtro + '%')
					OR (EDT.Nomenclatura LIKE '%' + @Filtro + '%')
					OR (EDT.Orden LIKE '%' + @Filtro + '%')
					OR (EDT.Observaciones LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_EstadosDeTareas__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_EstadosDeTareas__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_EstadosDeTareas__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'EstadosDeTareas'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT EDT.id
					,EDT.Nombre
			FROM EstadosDeTareas AS EDT
			WHERE
				(EDT.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (EDT.Activo = @Activo OR @Activo IS NULL)
				)
				AND (
					(@Filtro = '')
					OR (EDT.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY EDT.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: EstadosDeTareas /Listados/ - FIN
 
 
 
 
-- SP-TABLA: ExtensionesDeArchivos /Listados/ - INICIO
IF (OBJECT_ID('usp_ExtensionesDeArchivos__Listado') IS NOT NULL) DROP PROCEDURE usp_ExtensionesDeArchivos__Listado
GO
CREATE PROCEDURE usp_ExtensionesDeArchivos__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@IconoId                                       INT = '-1' -- VERIFICAR ESTE CAMPO
	,@TipoDeArchivoId                               INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'ExtensionesDeArchivos'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT EDA.id
					,EDA.Nombre
					,EDA.IconoId
					,EDA.TipoDeArchivoId
					,EDA.ProgramaAsociado
					,EDA.Observaciones
					,CAST(IC.Nombre AS VARCHAR) AS Icono
					,CAST(TDARCH.Nombre AS VARCHAR) AS TipoDeArchivo
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN EDA.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN EDA.id END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN EDA.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN EDA.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'IconoId' AND @Sentido = '0' THEN EDA.IconoId END
							,CASE WHEN @OrdenarPor = 'IconoId' AND @Sentido = '1' THEN EDA.IconoId END DESC
							,CASE WHEN @OrdenarPor = 'TipoDeArchivoId' AND @Sentido = '0' THEN EDA.TipoDeArchivoId END
							,CASE WHEN @OrdenarPor = 'TipoDeArchivoId' AND @Sentido = '1' THEN EDA.TipoDeArchivoId END DESC
							,CASE WHEN @OrdenarPor = 'ProgramaAsociado' AND @Sentido = '0' THEN EDA.ProgramaAsociado END
							,CASE WHEN @OrdenarPor = 'ProgramaAsociado' AND @Sentido = '1' THEN EDA.ProgramaAsociado END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN EDA.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN EDA.Observaciones END DESC
							,CASE WHEN @OrdenarPor = 'Icono' AND @Sentido = '0' THEN IC.Nombre END
							,CASE WHEN @OrdenarPor = 'Icono' AND @Sentido = '1' THEN IC.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'TipoDeArchivo' AND @Sentido = '0' THEN TDARCH.Nombre END
							,CASE WHEN @OrdenarPor = 'TipoDeArchivo' AND @Sentido = '1' THEN TDARCH.Nombre END DESC
					) AS NumeroDeRegistro
			FROM ExtensionesDeArchivos AS EDA
				INNER JOIN Iconos IC ON IC.id = EDA.IconoId
				INNER JOIN TiposDeArchivos TDARCH ON TDARCH.id = EDA.TipoDeArchivoId
			WHERE
				(EDA.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (EDA.IconoId = @IconoId OR @IconoId = '-1') -- VERIFICAR ESTE CAMPO
				AND (EDA.TipoDeArchivoId = @TipoDeArchivoId OR @TipoDeArchivoId = '-1') -- VERIFICAR ESTE CAMPO
				AND
				(
					(@Filtro = '')
					OR (EDA.Nombre LIKE '%' + @Filtro + '%')
					OR (EDA.IconoId LIKE '%' + @Filtro + '%')
					OR (EDA.TipoDeArchivoId LIKE '%' + @Filtro + '%')
					OR (EDA.ProgramaAsociado LIKE '%' + @Filtro + '%')
					OR (EDA.Observaciones LIKE '%' + @Filtro + '%')
					OR (IC.Nombre LIKE '%' + @Filtro + '%')
					OR (TDARCH.Nombre LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_ExtensionesDeArchivos__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_ExtensionesDeArchivos__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_ExtensionesDeArchivos__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@IconoId                                       INT = '-1' -- VERIFICAR ESTE CAMPO
	,@TipoDeArchivoId                               INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'ExtensionesDeArchivos'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT EDA.id
					,EDA.Nombre
			FROM ExtensionesDeArchivos AS EDA
			WHERE
				(EDA.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (EDA.IconoId = @IconoId OR @IconoId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (EDA.TipoDeArchivoId = @TipoDeArchivoId OR @TipoDeArchivoId = '-1') -- VERIFICAR ESTE CAMPO
				)
				AND (
					(@Filtro = '')
					OR (EDA.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY EDA.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: ExtensionesDeArchivos /Listados/ - FIN
 
 
 
 
-- SP-TABLA: FuncionesDePaginas /Listados/ - INICIO
IF (OBJECT_ID('usp_FuncionesDePaginas__Listado') IS NOT NULL) DROP PROCEDURE usp_FuncionesDePaginas__Listado
GO
CREATE PROCEDURE usp_FuncionesDePaginas__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'FuncionesDePaginas'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT FDP.id
					,FDP.Nombre
					,FDP.NombreAMostrar
					,FDP.Observaciones
					,FDP.GeneraPagina
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN FDP.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN FDP.id END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN FDP.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN FDP.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'NombreAMostrar' AND @Sentido = '0' THEN FDP.NombreAMostrar END
							,CASE WHEN @OrdenarPor = 'NombreAMostrar' AND @Sentido = '1' THEN FDP.NombreAMostrar END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN FDP.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN FDP.Observaciones END DESC
							,CASE WHEN @OrdenarPor = 'GeneraPagina' AND @Sentido = '0' THEN FDP.GeneraPagina END
							,CASE WHEN @OrdenarPor = 'GeneraPagina' AND @Sentido = '1' THEN FDP.GeneraPagina END DESC
					) AS NumeroDeRegistro
			FROM FuncionesDePaginas AS FDP
			WHERE
				(FDP.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND
				(
					(@Filtro = '')
					OR (FDP.Nombre LIKE '%' + @Filtro + '%')
					OR (FDP.NombreAMostrar LIKE '%' + @Filtro + '%')
					OR (FDP.Observaciones LIKE '%' + @Filtro + '%')
					OR (FDP.GeneraPagina LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_FuncionesDePaginas__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_FuncionesDePaginas__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_FuncionesDePaginas__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'FuncionesDePaginas'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT FDP.id
					,FDP.Nombre
			FROM FuncionesDePaginas AS FDP
			WHERE
				(FDP.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
				)
				AND (
					(@Filtro = '')
					OR (FDP.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY FDP.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: FuncionesDePaginas /Listados/ - FIN
 
 
 
 
-- SP-TABLA: Iconos /Listados/ - INICIO
IF (OBJECT_ID('usp_Iconos__Listado') IS NOT NULL) DROP PROCEDURE usp_Iconos__Listado
GO
CREATE PROCEDURE usp_Iconos__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'Iconos'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT IC.id
					,IC.Nombre
					,IC.Imagen
					,IC.Altura
					,IC.Ancho
					,IC.OffsetX
					,IC.OffsetY
					,IC.Observaciones
					,IC.Activo
					,N'images/cbx/img_' + CONVERT(VARCHAR(5),IC.Activo) + N'.jpg' AS imgActivo
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN IC.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN IC.id END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN IC.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN IC.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Imagen' AND @Sentido = '0' THEN IC.Imagen END
							,CASE WHEN @OrdenarPor = 'Imagen' AND @Sentido = '1' THEN IC.Imagen END DESC
							,CASE WHEN @OrdenarPor = 'Altura' AND @Sentido = '0' THEN IC.Altura END
							,CASE WHEN @OrdenarPor = 'Altura' AND @Sentido = '1' THEN IC.Altura END DESC
							,CASE WHEN @OrdenarPor = 'Ancho' AND @Sentido = '0' THEN IC.Ancho END
							,CASE WHEN @OrdenarPor = 'Ancho' AND @Sentido = '1' THEN IC.Ancho END DESC
							,CASE WHEN @OrdenarPor = 'OffsetX' AND @Sentido = '0' THEN IC.OffsetX END
							,CASE WHEN @OrdenarPor = 'OffsetX' AND @Sentido = '1' THEN IC.OffsetX END DESC
							,CASE WHEN @OrdenarPor = 'OffsetY' AND @Sentido = '0' THEN IC.OffsetY END
							,CASE WHEN @OrdenarPor = 'OffsetY' AND @Sentido = '1' THEN IC.OffsetY END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN IC.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN IC.Observaciones END DESC
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '0' THEN IC.Activo END
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '1' THEN IC.Activo END DESC
					) AS NumeroDeRegistro
			FROM Iconos AS IC
			WHERE
				(IC.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (IC.Activo = @Activo OR @Activo IS NULL)
				AND
				(
					(@Filtro = '')
					OR (IC.Nombre LIKE '%' + @Filtro + '%')
					OR (IC.Imagen LIKE '%' + @Filtro + '%')
					OR (IC.Altura LIKE '%' + @Filtro + '%')
					OR (IC.Ancho LIKE '%' + @Filtro + '%')
					OR (IC.OffsetX LIKE '%' + @Filtro + '%')
					OR (IC.OffsetY LIKE '%' + @Filtro + '%')
					OR (IC.Observaciones LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_Iconos__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_Iconos__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_Iconos__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'Iconos'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT IC.id
					,IC.Nombre
			FROM Iconos AS IC
			WHERE
				(IC.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (IC.Activo = @Activo OR @Activo IS NULL)
				)
				AND (
					(@Filtro = '')
					OR (IC.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY IC.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: Iconos /Listados/ - FIN
 
 
 
 
-- SP-TABLA: IconosCSS /Listados/ - INICIO
IF (OBJECT_ID('usp_IconosCSS__Listado') IS NOT NULL) DROP PROCEDURE usp_IconosCSS__Listado
GO
CREATE PROCEDURE usp_IconosCSS__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'IconosCSS'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT ICSS.id
					,ICSS.Nombre
					,ICSS.CSS
					,ICSS.Observaciones
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN ICSS.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN ICSS.id END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN ICSS.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN ICSS.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'CSS' AND @Sentido = '0' THEN ICSS.CSS END
							,CASE WHEN @OrdenarPor = 'CSS' AND @Sentido = '1' THEN ICSS.CSS END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN ICSS.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN ICSS.Observaciones END DESC
					) AS NumeroDeRegistro
			FROM IconosCSS AS ICSS
			WHERE
				(ICSS.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND
				(
					(@Filtro = '')
					OR (ICSS.Nombre LIKE '%' + @Filtro + '%')
					OR (ICSS.CSS LIKE '%' + @Filtro + '%')
					OR (ICSS.Observaciones LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_IconosCSS__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_IconosCSS__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_IconosCSS__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'IconosCSS'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT ICSS.id
					,ICSS.Nombre
			FROM IconosCSS AS ICSS
			WHERE
				(ICSS.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
				)
				AND (
					(@Filtro = '')
					OR (ICSS.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY ICSS.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: IconosCSS /Listados/ - FIN
 
 
 
 
-- SP-TABLA: ImportanciasDeTareas /Listados/ - INICIO
IF (OBJECT_ID('usp_ImportanciasDeTareas__Listado') IS NOT NULL) DROP PROCEDURE usp_ImportanciasDeTareas__Listado
GO
CREATE PROCEDURE usp_ImportanciasDeTareas__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'ImportanciasDeTareas'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT IDT.id
					,IDT.Nombre
					,IDT.Nomenclatura
					,IDT.Orden
					,IDT.Observaciones
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN IDT.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN IDT.id END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN IDT.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN IDT.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Nomenclatura' AND @Sentido = '0' THEN IDT.Nomenclatura END
							,CASE WHEN @OrdenarPor = 'Nomenclatura' AND @Sentido = '1' THEN IDT.Nomenclatura END DESC
							,CASE WHEN @OrdenarPor = 'Orden' AND @Sentido = '0' THEN IDT.Orden END
							,CASE WHEN @OrdenarPor = 'Orden' AND @Sentido = '1' THEN IDT.Orden END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN IDT.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN IDT.Observaciones END DESC
					) AS NumeroDeRegistro
			FROM ImportanciasDeTareas AS IDT
			WHERE
				(IDT.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND
				(
					(@Filtro = '')
					OR (IDT.Nombre LIKE '%' + @Filtro + '%')
					OR (IDT.Nomenclatura LIKE '%' + @Filtro + '%')
					OR (IDT.Orden LIKE '%' + @Filtro + '%')
					OR (IDT.Observaciones LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_ImportanciasDeTareas__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_ImportanciasDeTareas__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_ImportanciasDeTareas__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'ImportanciasDeTareas'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT IDT.id
					,IDT.Nombre
			FROM ImportanciasDeTareas AS IDT
			WHERE
				(IDT.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
				)
				AND (
					(@Filtro = '')
					OR (IDT.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY IDT.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: ImportanciasDeTareas /Listados/ - FIN
 
 
 
 
-- SP-TABLA: LogEnviosDeCorreos /Listados/ - INICIO
IF (OBJECT_ID('usp_LogEnviosDeCorreos__Listado') IS NOT NULL) DROP PROCEDURE usp_LogEnviosDeCorreos__Listado
GO
CREATE PROCEDURE usp_LogEnviosDeCorreos__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@EnvioDeCorreoId                               INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'LogEnviosDeCorreos'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT LEDC.id
					,LEDC.EnvioDeCorreoId
					,LEDC.Satisfactorio
					,LEDC.Fecha
					,LEDC.Observaciones
					,LEDC.ObservacionesDeRevision
					,CAST(EDC.Asunto AS VARCHAR) AS EnvioDeCorreo
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN LEDC.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN LEDC.id END DESC
							,CASE WHEN @OrdenarPor = 'EnvioDeCorreoId' AND @Sentido = '0' THEN LEDC.EnvioDeCorreoId END
							,CASE WHEN @OrdenarPor = 'EnvioDeCorreoId' AND @Sentido = '1' THEN LEDC.EnvioDeCorreoId END DESC
							,CASE WHEN @OrdenarPor = 'Satisfactorio' AND @Sentido = '0' THEN LEDC.Satisfactorio END
							,CASE WHEN @OrdenarPor = 'Satisfactorio' AND @Sentido = '1' THEN LEDC.Satisfactorio END DESC
							,CASE WHEN @OrdenarPor = 'Fecha' AND @Sentido = '0' THEN LEDC.Fecha END
							,CASE WHEN @OrdenarPor = 'Fecha' AND @Sentido = '1' THEN LEDC.Fecha END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN LEDC.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN LEDC.Observaciones END DESC
							,CASE WHEN @OrdenarPor = 'ObservacionesDeRevision' AND @Sentido = '0' THEN LEDC.ObservacionesDeRevision END
							,CASE WHEN @OrdenarPor = 'ObservacionesDeRevision' AND @Sentido = '1' THEN LEDC.ObservacionesDeRevision END DESC
							,CASE WHEN @OrdenarPor = 'EnvioDeCorreo' AND @Sentido = '0' THEN EDC.Asunto END
							,CASE WHEN @OrdenarPor = 'EnvioDeCorreo' AND @Sentido = '1' THEN EDC.Asunto END DESC
					) AS NumeroDeRegistro
			FROM LogEnviosDeCorreos AS LEDC
				INNER JOIN EnviosDeCorreos EDC ON EDC.id = LEDC.EnvioDeCorreoId
			WHERE
				(LEDC.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (LEDC.EnvioDeCorreoId = @EnvioDeCorreoId OR @EnvioDeCorreoId = '-1') -- VERIFICAR ESTE CAMPO
				AND
				(
					(@Filtro = '')
					OR (LEDC.EnvioDeCorreoId LIKE '%' + @Filtro + '%')
					OR (LEDC.Satisfactorio LIKE '%' + @Filtro + '%')
					OR (LEDC.Fecha LIKE '%' + @Filtro + '%')
					OR (LEDC.Observaciones LIKE '%' + @Filtro + '%')
					OR (LEDC.ObservacionesDeRevision LIKE '%' + @Filtro + '%')
					OR (EDC.Asunto LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_LogEnviosDeCorreos__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_LogEnviosDeCorreos__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_LogEnviosDeCorreos__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@EnvioDeCorreoId                               INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'LogEnviosDeCorreos'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT LEDC.id
					,LEDC.Fecha
			FROM LogEnviosDeCorreos AS LEDC
			WHERE
				(LEDC.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (LEDC.EnvioDeCorreoId = @EnvioDeCorreoId OR @EnvioDeCorreoId = '-1') -- VERIFICAR ESTE CAMPO
				)
				AND (
					(@Filtro = '')
					OR (LEDC.Fecha LIKE '%' + @Filtro + '%')
				)
			ORDER BY LEDC.Fecha
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: LogEnviosDeCorreos /Listados/ - FIN
 
 
 
 
-- SP-TABLA: LogLogins /Listados/ - INICIO
IF (OBJECT_ID('usp_LogLogins__Listado') IS NOT NULL) DROP PROCEDURE usp_LogLogins__Listado
GO
CREATE PROCEDURE usp_LogLogins__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@DispositivoId                                 INT = '-1' -- VERIFICAR ESTE CAMPO
	,@TipoDeLogLoginId                              INT = '-1' -- VERIFICAR ESTE CAMPO
	,@UsuarioId                                     INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'LogLogins'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT LL.id
					,LL.UsuarioId
					,LL.FechaDeEjecucion
					,LL.UsuarioIngresado
					,LL.TipoDeLogLoginId
					,LL.DispositivoId
					,CAST(DISP.UserMachineName AS VARCHAR) AS Dispositivo
					,CAST(TDLL.Nombre AS VARCHAR) AS TipoDeLogLogin
					,U.Apellido + ', ' + U.Nombre AS Usuario
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN LL.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN LL.id END DESC
							,CASE WHEN @OrdenarPor = 'UsuarioId' AND @Sentido = '0' THEN LL.UsuarioId END
							,CASE WHEN @OrdenarPor = 'UsuarioId' AND @Sentido = '1' THEN LL.UsuarioId END DESC
							,CASE WHEN @OrdenarPor = 'FechaDeEjecucion' AND @Sentido = '0' THEN LL.FechaDeEjecucion END
							,CASE WHEN @OrdenarPor = 'FechaDeEjecucion' AND @Sentido = '1' THEN LL.FechaDeEjecucion END DESC
							,CASE WHEN @OrdenarPor = 'UsuarioIngresado' AND @Sentido = '0' THEN LL.UsuarioIngresado END
							,CASE WHEN @OrdenarPor = 'UsuarioIngresado' AND @Sentido = '1' THEN LL.UsuarioIngresado END DESC
							,CASE WHEN @OrdenarPor = 'TipoDeLogLoginId' AND @Sentido = '0' THEN LL.TipoDeLogLoginId END
							,CASE WHEN @OrdenarPor = 'TipoDeLogLoginId' AND @Sentido = '1' THEN LL.TipoDeLogLoginId END DESC
							,CASE WHEN @OrdenarPor = 'DispositivoId' AND @Sentido = '0' THEN LL.DispositivoId END
							,CASE WHEN @OrdenarPor = 'DispositivoId' AND @Sentido = '1' THEN LL.DispositivoId END DESC
							,CASE WHEN @OrdenarPor = 'Dispositivo' AND @Sentido = '0' THEN DISP.UserMachineName END
							,CASE WHEN @OrdenarPor = 'Dispositivo' AND @Sentido = '1' THEN DISP.UserMachineName END DESC
							,CASE WHEN @OrdenarPor = 'TipoDeLogLogin' AND @Sentido = '0' THEN TDLL.Nombre END
							,CASE WHEN @OrdenarPor = 'TipoDeLogLogin' AND @Sentido = '1' THEN TDLL.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Usuario' AND @Sentido = '0' THEN U.Apellido END
							,CASE WHEN @OrdenarPor = 'Usuario' AND @Sentido = '0' THEN U.Nombre END
							,CASE WHEN @OrdenarPor = 'Usuario' AND @Sentido = '1' THEN U.Apellido END DESC
							,CASE WHEN @OrdenarPor = 'Usuario' AND @Sentido = '1' THEN U.Nombre END DESC
					) AS NumeroDeRegistro
			FROM LogLogins AS LL
				INNER JOIN Dispositivos DISP ON DISP.id = LL.DispositivoId
				INNER JOIN TiposDeLogLogins TDLL ON TDLL.id = LL.TipoDeLogLoginId
				INNER JOIN Usuarios U ON U.id = LL.UsuarioId
			WHERE
				(LL.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (LL.DispositivoId = @DispositivoId OR @DispositivoId = '-1') -- VERIFICAR ESTE CAMPO
				AND (LL.TipoDeLogLoginId = @TipoDeLogLoginId OR @TipoDeLogLoginId = '-1') -- VERIFICAR ESTE CAMPO
				AND (LL.UsuarioId = @UsuarioId OR @UsuarioId = '-1') -- VERIFICAR ESTE CAMPO
				AND
				(
					(@Filtro = '')
					OR (LL.UsuarioId LIKE '%' + @Filtro + '%')
					OR (LL.FechaDeEjecucion LIKE '%' + @Filtro + '%')
					OR (LL.UsuarioIngresado LIKE '%' + @Filtro + '%')
					OR (LL.TipoDeLogLoginId LIKE '%' + @Filtro + '%')
					OR (LL.DispositivoId LIKE '%' + @Filtro + '%')
					OR (DISP.UserMachineName LIKE '%' + @Filtro + '%')
					OR (TDLL.Nombre LIKE '%' + @Filtro + '%')
					OR (U.Apellido LIKE '%' + @Filtro + '%')
					OR (U.Nombre LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_LogLogins__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_LogLogins__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_LogLogins__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@DispositivoId                                 INT = '-1' -- VERIFICAR ESTE CAMPO
	,@TipoDeLogLoginId                              INT = '-1' -- VERIFICAR ESTE CAMPO
	,@UsuarioId                                     INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'LogLogins'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT LL.id
					,LL.FechaDeEjecucion
			FROM LogLogins AS LL
			WHERE
				(LL.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (LL.DispositivoId = @DispositivoId OR @DispositivoId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (LL.TipoDeLogLoginId = @TipoDeLogLoginId OR @TipoDeLogLoginId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (LL.UsuarioId = @UsuarioId OR @UsuarioId = '-1') -- VERIFICAR ESTE CAMPO
				)
				AND (
					(@Filtro = '')
					OR (LL.FechaDeEjecucion LIKE '%' + @Filtro + '%')
				)
			ORDER BY LL.FechaDeEjecucion
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: LogLogins /Listados/ - FIN
 
 
 
 
-- SP-TABLA: Notificaciones /Listados/ - INICIO
IF (OBJECT_ID('usp_Notificaciones__Listado') IS NOT NULL) DROP PROCEDURE usp_Notificaciones__Listado
GO
CREATE PROCEDURE usp_Notificaciones__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
	,@IconoCSSId                                    INT = '-1' -- VERIFICAR ESTE CAMPO
	,@TablaId                                       INT = '-1' -- VERIFICAR ESTE CAMPO
	,@UsuarioDestinatarioId                         INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'Notificaciones'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT NOTIF.id
					,NOTIF.ContextoId
					,NOTIF.Fecha
					,NOTIF.Numero
					,NOTIF.UsuarioDestinatarioId
					,NOTIF.TablaId
					,NOTIF.RegistroId
					,NOTIF.IconoCSSId
					,NOTIF.Cuerpo
					,NOTIF.Leida
					,NOTIF.Activo
					,N'images/cbx/img_' + CONVERT(VARCHAR(5),NOTIF.Activo) + N'.jpg' AS imgActivo
					,CAST(CX.Nombre AS VARCHAR) AS Contexto
					,CAST(ICSS.Nombre AS VARCHAR) AS IconoCSS
					,CAST(T.Nombre AS VARCHAR) AS Tabla
					,U.Apellido + ', ' + U.Nombre AS UsuarioDestinatario
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN NOTIF.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN NOTIF.id END DESC
							,CASE WHEN @OrdenarPor = 'ContextoId' AND @Sentido = '0' THEN NOTIF.ContextoId END
							,CASE WHEN @OrdenarPor = 'ContextoId' AND @Sentido = '1' THEN NOTIF.ContextoId END DESC
							,CASE WHEN @OrdenarPor = 'Fecha' AND @Sentido = '0' THEN NOTIF.Fecha END
							,CASE WHEN @OrdenarPor = 'Fecha' AND @Sentido = '1' THEN NOTIF.Fecha END DESC
							,CASE WHEN @OrdenarPor = 'Numero' AND @Sentido = '0' THEN NOTIF.Numero END
							,CASE WHEN @OrdenarPor = 'Numero' AND @Sentido = '1' THEN NOTIF.Numero END DESC
							,CASE WHEN @OrdenarPor = 'UsuarioDestinatarioId' AND @Sentido = '0' THEN NOTIF.UsuarioDestinatarioId END
							,CASE WHEN @OrdenarPor = 'UsuarioDestinatarioId' AND @Sentido = '1' THEN NOTIF.UsuarioDestinatarioId END DESC
							,CASE WHEN @OrdenarPor = 'TablaId' AND @Sentido = '0' THEN NOTIF.TablaId END
							,CASE WHEN @OrdenarPor = 'TablaId' AND @Sentido = '1' THEN NOTIF.TablaId END DESC
							,CASE WHEN @OrdenarPor = 'RegistroId' AND @Sentido = '0' THEN NOTIF.RegistroId END
							,CASE WHEN @OrdenarPor = 'RegistroId' AND @Sentido = '1' THEN NOTIF.RegistroId END DESC
							,CASE WHEN @OrdenarPor = 'IconoCSSId' AND @Sentido = '0' THEN NOTIF.IconoCSSId END
							,CASE WHEN @OrdenarPor = 'IconoCSSId' AND @Sentido = '1' THEN NOTIF.IconoCSSId END DESC
							,CASE WHEN @OrdenarPor = 'Cuerpo' AND @Sentido = '0' THEN NOTIF.Cuerpo END
							,CASE WHEN @OrdenarPor = 'Cuerpo' AND @Sentido = '1' THEN NOTIF.Cuerpo END DESC
							,CASE WHEN @OrdenarPor = 'Leida' AND @Sentido = '0' THEN NOTIF.Leida END
							,CASE WHEN @OrdenarPor = 'Leida' AND @Sentido = '1' THEN NOTIF.Leida END DESC
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '0' THEN NOTIF.Activo END
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '1' THEN NOTIF.Activo END DESC
							,CASE WHEN @OrdenarPor = 'Contexto' AND @Sentido = '0' THEN CX.Nombre END
							,CASE WHEN @OrdenarPor = 'Contexto' AND @Sentido = '1' THEN CX.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'IconoCSS' AND @Sentido = '0' THEN ICSS.Nombre END
							,CASE WHEN @OrdenarPor = 'IconoCSS' AND @Sentido = '1' THEN ICSS.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Tabla' AND @Sentido = '0' THEN T.Nombre END
							,CASE WHEN @OrdenarPor = 'Tabla' AND @Sentido = '1' THEN T.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'UsuarioDestinatario' AND @Sentido = '0' THEN U.Apellido END
							,CASE WHEN @OrdenarPor = 'UsuarioDestinatario' AND @Sentido = '0' THEN U.Nombre END
							,CASE WHEN @OrdenarPor = 'UsuarioDestinatario' AND @Sentido = '1' THEN U.Apellido END DESC
							,CASE WHEN @OrdenarPor = 'UsuarioDestinatario' AND @Sentido = '1' THEN U.Nombre END DESC
					) AS NumeroDeRegistro
			FROM Notificaciones AS NOTIF
				INNER JOIN Contextos CX ON CX.id = NOTIF.ContextoId
				INNER JOIN IconosCSS ICSS ON ICSS.id = NOTIF.IconoCSSId
				INNER JOIN Tablas T ON T.id = NOTIF.TablaId
				INNER JOIN Usuarios U ON U.id = NOTIF.UsuarioDestinatarioId
			WHERE
				(NOTIF.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (NOTIF.IconoCSSId = @IconoCSSId OR @IconoCSSId = '-1') -- VERIFICAR ESTE CAMPO
				AND (NOTIF.TablaId = @TablaId OR @TablaId = '-1') -- VERIFICAR ESTE CAMPO
				AND (NOTIF.UsuarioDestinatarioId = @UsuarioDestinatarioId OR @UsuarioDestinatarioId = '-1') -- VERIFICAR ESTE CAMPO
				AND (NOTIF.Activo = @Activo OR @Activo IS NULL)
				AND (NOTIF.ContextoId = @ContextoId OR @ContextoId = '-1')
				AND
				(
					(@Filtro = '')
					OR (NOTIF.Fecha LIKE '%' + @Filtro + '%')
					OR (NOTIF.Numero LIKE '%' + @Filtro + '%')
					OR (NOTIF.UsuarioDestinatarioId LIKE '%' + @Filtro + '%')
					OR (NOTIF.TablaId LIKE '%' + @Filtro + '%')
					OR (NOTIF.RegistroId LIKE '%' + @Filtro + '%')
					OR (NOTIF.IconoCSSId LIKE '%' + @Filtro + '%')
					OR (NOTIF.Cuerpo LIKE '%' + @Filtro + '%')
					OR (NOTIF.Leida LIKE '%' + @Filtro + '%')
					OR (CX.Nombre LIKE '%' + @Filtro + '%')
					OR (ICSS.Nombre LIKE '%' + @Filtro + '%')
					OR (T.Nombre LIKE '%' + @Filtro + '%')
					OR (U.Apellido LIKE '%' + @Filtro + '%')
					OR (U.Nombre LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_Notificaciones__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_Notificaciones__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_Notificaciones__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
	,@IconoCSSId                                    INT = '-1' -- VERIFICAR ESTE CAMPO
	,@TablaId                                       INT = '-1' -- VERIFICAR ESTE CAMPO
	,@UsuarioDestinatarioId                         INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'Notificaciones'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT NOTIF.id
					,NOTIF.Numero
			FROM Notificaciones AS NOTIF
			WHERE
				(NOTIF.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (NOTIF.IconoCSSId = @IconoCSSId OR @IconoCSSId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (NOTIF.TablaId = @TablaId OR @TablaId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (NOTIF.UsuarioDestinatarioId = @UsuarioDestinatarioId OR @UsuarioDestinatarioId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (NOTIF.Activo = @Activo OR @Activo IS NULL)
					 AND (NOTIF.ContextoId = @ContextoId OR @ContextoId = '-1')
				)
				AND (
					(@Filtro = '')
					OR (NOTIF.Numero LIKE '%' + @Filtro + '%')
				)
			ORDER BY NOTIF.Numero
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: Notificaciones /Listados/ - FIN
 
 
 
 
-- SP-TABLA: ParametrosDelSistema /Listados/ - INICIO
IF (OBJECT_ID('usp_ParametrosDelSistema__Listado') IS NOT NULL) DROP PROCEDURE usp_ParametrosDelSistema__Listado
GO
CREATE PROCEDURE usp_ParametrosDelSistema__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'ParametrosDelSistema'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT PDS.id
					,PDS.ContextoId
					,PDS.Contextohabilitadi
					,PDS.IntentosFallidosDeLoginPermitidos
					,PDS.IntervaloDeIntentosFallidoLogin
					,PDS.MinDeBloqueoTrasIntentosFallidoLogin
					,PDS.PermitidasLasModificaciones
					,PDS.PermitidasLasConsultas
					,PDS.PermitidasLasExportaciones
					,PDS.PermitidosLosEnviosDeCorreo
					,PDS.DiferenciaHorariaDelServidor
					,PDS.Observaciones
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN PDS.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN PDS.id END DESC
							,CASE WHEN @OrdenarPor = 'ContextoId' AND @Sentido = '0' THEN PDS.ContextoId END
							,CASE WHEN @OrdenarPor = 'ContextoId' AND @Sentido = '1' THEN PDS.ContextoId END DESC
							,CASE WHEN @OrdenarPor = 'Contextohabilitadi' AND @Sentido = '0' THEN PDS.Contextohabilitadi END
							,CASE WHEN @OrdenarPor = 'Contextohabilitadi' AND @Sentido = '1' THEN PDS.Contextohabilitadi END DESC
							,CASE WHEN @OrdenarPor = 'IntentosFallidosDeLoginPermitidos' AND @Sentido = '0' THEN PDS.IntentosFallidosDeLoginPermitidos END
							,CASE WHEN @OrdenarPor = 'IntentosFallidosDeLoginPermitidos' AND @Sentido = '1' THEN PDS.IntentosFallidosDeLoginPermitidos END DESC
							,CASE WHEN @OrdenarPor = 'IntervaloDeIntentosFallidoLogin' AND @Sentido = '0' THEN PDS.IntervaloDeIntentosFallidoLogin END
							,CASE WHEN @OrdenarPor = 'IntervaloDeIntentosFallidoLogin' AND @Sentido = '1' THEN PDS.IntervaloDeIntentosFallidoLogin END DESC
							,CASE WHEN @OrdenarPor = 'MinDeBloqueoTrasIntentosFallidoLogin' AND @Sentido = '0' THEN PDS.MinDeBloqueoTrasIntentosFallidoLogin END
							,CASE WHEN @OrdenarPor = 'MinDeBloqueoTrasIntentosFallidoLogin' AND @Sentido = '1' THEN PDS.MinDeBloqueoTrasIntentosFallidoLogin END DESC
							,CASE WHEN @OrdenarPor = 'PermitidasLasModificaciones' AND @Sentido = '0' THEN PDS.PermitidasLasModificaciones END
							,CASE WHEN @OrdenarPor = 'PermitidasLasModificaciones' AND @Sentido = '1' THEN PDS.PermitidasLasModificaciones END DESC
							,CASE WHEN @OrdenarPor = 'PermitidasLasConsultas' AND @Sentido = '0' THEN PDS.PermitidasLasConsultas END
							,CASE WHEN @OrdenarPor = 'PermitidasLasConsultas' AND @Sentido = '1' THEN PDS.PermitidasLasConsultas END DESC
							,CASE WHEN @OrdenarPor = 'PermitidasLasExportaciones' AND @Sentido = '0' THEN PDS.PermitidasLasExportaciones END
							,CASE WHEN @OrdenarPor = 'PermitidasLasExportaciones' AND @Sentido = '1' THEN PDS.PermitidasLasExportaciones END DESC
							,CASE WHEN @OrdenarPor = 'PermitidosLosEnviosDeCorreo' AND @Sentido = '0' THEN PDS.PermitidosLosEnviosDeCorreo END
							,CASE WHEN @OrdenarPor = 'PermitidosLosEnviosDeCorreo' AND @Sentido = '1' THEN PDS.PermitidosLosEnviosDeCorreo END DESC
							,CASE WHEN @OrdenarPor = 'DiferenciaHorariaDelServidor' AND @Sentido = '0' THEN PDS.DiferenciaHorariaDelServidor END
							,CASE WHEN @OrdenarPor = 'DiferenciaHorariaDelServidor' AND @Sentido = '1' THEN PDS.DiferenciaHorariaDelServidor END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN PDS.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN PDS.Observaciones END DESC
					) AS NumeroDeRegistro
			FROM ParametrosDelSistema AS PDS
			WHERE
				(PDS.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (PDS.ContextoId = @ContextoId OR @ContextoId = '-1')
				AND
				(
					(@Filtro = '')
					OR (PDS.Contextohabilitadi LIKE '%' + @Filtro + '%')
					OR (PDS.IntentosFallidosDeLoginPermitidos LIKE '%' + @Filtro + '%')
					OR (PDS.IntervaloDeIntentosFallidoLogin LIKE '%' + @Filtro + '%')
					OR (PDS.MinDeBloqueoTrasIntentosFallidoLogin LIKE '%' + @Filtro + '%')
					OR (PDS.PermitidasLasModificaciones LIKE '%' + @Filtro + '%')
					OR (PDS.PermitidasLasConsultas LIKE '%' + @Filtro + '%')
					OR (PDS.PermitidasLasExportaciones LIKE '%' + @Filtro + '%')
					OR (PDS.PermitidosLosEnviosDeCorreo LIKE '%' + @Filtro + '%')
					OR (PDS.DiferenciaHorariaDelServidor LIKE '%' + @Filtro + '%')
					OR (PDS.Observaciones LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_ParametrosDelSistema__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_ParametrosDelSistema__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_ParametrosDelSistema__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'ParametrosDelSistema'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT PDS.id
					,PDS.ContextoId
			FROM ParametrosDelSistema AS PDS
			WHERE
				(PDS.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (PDS.ContextoId = @ContextoId OR @ContextoId = '-1')
				)
				AND (
					(@Filtro = '')
					OR (PDS.ContextoId LIKE '%' + @Filtro + '%')
				)
			ORDER BY PDS.ContextoId
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: ParametrosDelSistema /Listados/ - FIN
 
 
 
 
-- SP-TABLA: PrioridadesDeSoportes /Listados/ - INICIO
IF (OBJECT_ID('usp_PrioridadesDeSoportes__Listado') IS NOT NULL) DROP PROCEDURE usp_PrioridadesDeSoportes__Listado
GO
CREATE PROCEDURE usp_PrioridadesDeSoportes__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'PrioridadesDeSoportes'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT PDSop.id
					,PDSop.Nombre
					,PDSop.Orden
					,PDSop.Observaciones
					,PDSop.Activo
					,N'images/cbx/img_' + CONVERT(VARCHAR(5),PDSop.Activo) + N'.jpg' AS imgActivo
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN PDSop.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN PDSop.id END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN PDSop.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN PDSop.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Orden' AND @Sentido = '0' THEN PDSop.Orden END
							,CASE WHEN @OrdenarPor = 'Orden' AND @Sentido = '1' THEN PDSop.Orden END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN PDSop.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN PDSop.Observaciones END DESC
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '0' THEN PDSop.Activo END
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '1' THEN PDSop.Activo END DESC
					) AS NumeroDeRegistro
			FROM PrioridadesDeSoportes AS PDSop
			WHERE
				(PDSop.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (PDSop.Activo = @Activo OR @Activo IS NULL)
				AND
				(
					(@Filtro = '')
					OR (PDSop.Nombre LIKE '%' + @Filtro + '%')
					OR (PDSop.Orden LIKE '%' + @Filtro + '%')
					OR (PDSop.Observaciones LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_PrioridadesDeSoportes__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_PrioridadesDeSoportes__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_PrioridadesDeSoportes__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'PrioridadesDeSoportes'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT PDSop.id
					,PDSop.Nombre
			FROM PrioridadesDeSoportes AS PDSop
			WHERE
				(PDSop.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (PDSop.Activo = @Activo OR @Activo IS NULL)
				)
				AND (
					(@Filtro = '')
					OR (PDSop.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY PDSop.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: PrioridadesDeSoportes /Listados/ - FIN
 
 
 
 
-- SP-TABLA: Publicaciones /Listados/ - INICIO
IF (OBJECT_ID('usp_Publicaciones__Listado') IS NOT NULL) DROP PROCEDURE usp_Publicaciones__Listado
GO
CREATE PROCEDURE usp_Publicaciones__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'Publicaciones'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT PUB.id
					,PUB.Fecha
					,PUB.Titulo
					,PUB.NumeroDeVersion
					,PUB.Realizada
					,PUB.Observaciones
					,PUB.Hora
					,PUB.Activo
					,N'images/cbx/img_' + CONVERT(VARCHAR(5),PUB.Activo) + N'.jpg' AS imgActivo
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN PUB.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN PUB.id END DESC
							,CASE WHEN @OrdenarPor = 'Fecha' AND @Sentido = '0' THEN PUB.Fecha END
							,CASE WHEN @OrdenarPor = 'Fecha' AND @Sentido = '1' THEN PUB.Fecha END DESC
							,CASE WHEN @OrdenarPor = 'Titulo' AND @Sentido = '0' THEN PUB.Titulo END
							,CASE WHEN @OrdenarPor = 'Titulo' AND @Sentido = '1' THEN PUB.Titulo END DESC
							,CASE WHEN @OrdenarPor = 'NumeroDeVersion' AND @Sentido = '0' THEN PUB.NumeroDeVersion END
							,CASE WHEN @OrdenarPor = 'NumeroDeVersion' AND @Sentido = '1' THEN PUB.NumeroDeVersion END DESC
							,CASE WHEN @OrdenarPor = 'Realizada' AND @Sentido = '0' THEN PUB.Realizada END
							,CASE WHEN @OrdenarPor = 'Realizada' AND @Sentido = '1' THEN PUB.Realizada END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN PUB.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN PUB.Observaciones END DESC
							,CASE WHEN @OrdenarPor = 'Hora' AND @Sentido = '0' THEN PUB.Hora END
							,CASE WHEN @OrdenarPor = 'Hora' AND @Sentido = '1' THEN PUB.Hora END DESC
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '0' THEN PUB.Activo END
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '1' THEN PUB.Activo END DESC
					) AS NumeroDeRegistro
			FROM Publicaciones AS PUB
			WHERE
				(PUB.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (PUB.Activo = @Activo OR @Activo IS NULL)
				AND
				(
					(@Filtro = '')
					OR (PUB.Fecha LIKE '%' + @Filtro + '%')
					OR (PUB.Titulo LIKE '%' + @Filtro + '%')
					OR (PUB.NumeroDeVersion LIKE '%' + @Filtro + '%')
					OR (PUB.Realizada LIKE '%' + @Filtro + '%')
					OR (PUB.Observaciones LIKE '%' + @Filtro + '%')
					OR (PUB.Hora LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_Publicaciones__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_Publicaciones__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_Publicaciones__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'Publicaciones'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT PUB.id
					,PUB.Fecha
			FROM Publicaciones AS PUB
			WHERE
				(PUB.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (PUB.Activo = @Activo OR @Activo IS NULL)
				)
				AND (
					(@Filtro = '')
					OR (PUB.Fecha LIKE '%' + @Filtro + '%')
				)
			ORDER BY PUB.Fecha
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: Publicaciones /Listados/ - FIN
 
 
 
 
-- SP-TABLA: RelAsig_Contactos_A_GruposDeContactos /Listados/ - INICIO
IF (OBJECT_ID('usp_RelAsig_Contactos_A_GruposDeContactos__Listado') IS NOT NULL) DROP PROCEDURE usp_RelAsig_Contactos_A_GruposDeContactos__Listado
GO
CREATE PROCEDURE usp_RelAsig_Contactos_A_GruposDeContactos__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@ContactoId                                    INT = '-1' -- VERIFICAR ESTE CAMPO
	,@GrupoDeContactoId                             INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'RelAsig_Contactos_A_GruposDeContactos'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT ACAG.id
					,ACAG.ContactoId
					,ACAG.GrupoDeContactoId
					,CAST(CTOS.NombreCompleto AS VARCHAR) AS Contacto
					,CAST(CTOS.NombreCompleto AS VARCHAR) AS GrupoDeContacto
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN ACAG.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN ACAG.id END DESC
							,CASE WHEN @OrdenarPor = 'ContactoId' AND @Sentido = '0' THEN ACAG.ContactoId END
							,CASE WHEN @OrdenarPor = 'ContactoId' AND @Sentido = '1' THEN ACAG.ContactoId END DESC
							,CASE WHEN @OrdenarPor = 'GrupoDeContactoId' AND @Sentido = '0' THEN ACAG.GrupoDeContactoId END
							,CASE WHEN @OrdenarPor = 'GrupoDeContactoId' AND @Sentido = '1' THEN ACAG.GrupoDeContactoId END DESC
							,CASE WHEN @OrdenarPor = 'Contacto' AND @Sentido = '0' THEN CTOS.NombreCompleto END
							,CASE WHEN @OrdenarPor = 'Contacto' AND @Sentido = '1' THEN CTOS.NombreCompleto END DESC
							,CASE WHEN @OrdenarPor = 'GrupoDeContacto' AND @Sentido = '0' THEN CTOS.NombreCompleto END
							,CASE WHEN @OrdenarPor = 'GrupoDeContacto' AND @Sentido = '1' THEN CTOS.NombreCompleto END DESC
					) AS NumeroDeRegistro
			FROM RelAsig_Contactos_A_GruposDeContactos AS ACAG
				INNER JOIN Contactos CTOS ON CTOS.id = ACAG.ContactoId
 
			WHERE
				(ACAG.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (ACAG.ContactoId = @ContactoId OR @ContactoId = '-1') -- VERIFICAR ESTE CAMPO
				AND (ACAG.GrupoDeContactoId = @GrupoDeContactoId OR @GrupoDeContactoId = '-1') -- VERIFICAR ESTE CAMPO
				AND
				(
					(@Filtro = '')
					OR (ACAG.ContactoId LIKE '%' + @Filtro + '%')
					OR (ACAG.GrupoDeContactoId LIKE '%' + @Filtro + '%')
					OR (CTOS.NombreCompleto LIKE '%' + @Filtro + '%')
					OR (CTOS.NombreCompleto LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_RelAsig_Contactos_A_GruposDeContactos__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_RelAsig_Contactos_A_GruposDeContactos__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_RelAsig_Contactos_A_GruposDeContactos__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@ContactoId                                    INT = '-1' -- VERIFICAR ESTE CAMPO
	,@GrupoDeContactoId                             INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'RelAsig_Contactos_A_GruposDeContactos'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT ACAG.id
 
			FROM RelAsig_Contactos_A_GruposDeContactos AS ACAG
				INNER JOIN Contactos CTOS ON CTOS.id = ACAG.ContactoId
 
			WHERE
				(ACAG.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (ACAG.ContactoId = @ContactoId OR @ContactoId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (ACAG.GrupoDeContactoId = @GrupoDeContactoId OR @GrupoDeContactoId = '-1') -- VERIFICAR ESTE CAMPO
				)
				AND (
					(@Filtro = '')
 
				)
 
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: RelAsig_Contactos_A_GruposDeContactos /Listados/ - FIN
 
 
 
 
-- SP-TABLA: RelAsig_Contactos_A_TiposDeContactos /Listados/ - INICIO
IF (OBJECT_ID('usp_RelAsig_Contactos_A_TiposDeContactos__Listado') IS NOT NULL) DROP PROCEDURE usp_RelAsig_Contactos_A_TiposDeContactos__Listado
GO
CREATE PROCEDURE usp_RelAsig_Contactos_A_TiposDeContactos__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@ContactoId                                    INT = '-1' -- VERIFICAR ESTE CAMPO
	,@TipoDeContactoId                              INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'RelAsig_Contactos_A_TiposDeContactos'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT ACAT.id
					,ACAT.ContactoId
					,ACAT.TipoDeContactoId
					,CAST(CTOS.NombreCompleto AS VARCHAR) AS Contacto
					,CAST(TDC.Nombre AS VARCHAR) AS TipoDeContacto
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN ACAT.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN ACAT.id END DESC
							,CASE WHEN @OrdenarPor = 'ContactoId' AND @Sentido = '0' THEN ACAT.ContactoId END
							,CASE WHEN @OrdenarPor = 'ContactoId' AND @Sentido = '1' THEN ACAT.ContactoId END DESC
							,CASE WHEN @OrdenarPor = 'TipoDeContactoId' AND @Sentido = '0' THEN ACAT.TipoDeContactoId END
							,CASE WHEN @OrdenarPor = 'TipoDeContactoId' AND @Sentido = '1' THEN ACAT.TipoDeContactoId END DESC
							,CASE WHEN @OrdenarPor = 'Contacto' AND @Sentido = '0' THEN CTOS.NombreCompleto END
							,CASE WHEN @OrdenarPor = 'Contacto' AND @Sentido = '1' THEN CTOS.NombreCompleto END DESC
							,CASE WHEN @OrdenarPor = 'TipoDeContacto' AND @Sentido = '0' THEN TDC.Nombre END
							,CASE WHEN @OrdenarPor = 'TipoDeContacto' AND @Sentido = '1' THEN TDC.Nombre END DESC
					) AS NumeroDeRegistro
			FROM RelAsig_Contactos_A_TiposDeContactos AS ACAT
				INNER JOIN Contactos CTOS ON CTOS.id = ACAT.ContactoId
				INNER JOIN TiposDeContactos TDC ON TDC.id = ACAT.TipoDeContactoId
			WHERE
				(ACAT.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (ACAT.ContactoId = @ContactoId OR @ContactoId = '-1') -- VERIFICAR ESTE CAMPO
				AND (ACAT.TipoDeContactoId = @TipoDeContactoId OR @TipoDeContactoId = '-1') -- VERIFICAR ESTE CAMPO
				AND
				(
					(@Filtro = '')
					OR (ACAT.ContactoId LIKE '%' + @Filtro + '%')
					OR (ACAT.TipoDeContactoId LIKE '%' + @Filtro + '%')
					OR (CTOS.NombreCompleto LIKE '%' + @Filtro + '%')
					OR (TDC.Nombre LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_RelAsig_Contactos_A_TiposDeContactos__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_RelAsig_Contactos_A_TiposDeContactos__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_RelAsig_Contactos_A_TiposDeContactos__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@ContactoId                                    INT = '-1' -- VERIFICAR ESTE CAMPO
	,@TipoDeContactoId                              INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'RelAsig_Contactos_A_TiposDeContactos'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT ACAT.id
					,TDC.Nombre
			FROM RelAsig_Contactos_A_TiposDeContactos AS ACAT
				INNER JOIN Contactos CTOS ON CTOS.id = ACAT.ContactoId
				INNER JOIN TiposDeContactos TDC ON TDC.id = ACAT.TipoDeContactoId
			WHERE
				(ACAT.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (ACAT.ContactoId = @ContactoId OR @ContactoId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (ACAT.TipoDeContactoId = @TipoDeContactoId OR @TipoDeContactoId = '-1') -- VERIFICAR ESTE CAMPO
				)
				AND (
					(@Filtro = '')
					OR (TDC.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY TDC.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: RelAsig_Contactos_A_TiposDeContactos /Listados/ - FIN
 
 
 
 
-- SP-TABLA: RelAsig_CuentasDeEnvios_A_Tablas /Listados/ - INICIO
IF (OBJECT_ID('usp_RelAsig_CuentasDeEnvios_A_Tablas__Listado') IS NOT NULL) DROP PROCEDURE usp_RelAsig_CuentasDeEnvios_A_Tablas__Listado
GO
CREATE PROCEDURE usp_RelAsig_CuentasDeEnvios_A_Tablas__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@CuentaDeEnvioId                               INT = '-1' -- VERIFICAR ESTE CAMPO
	,@TablaId                                       INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'RelAsig_CuentasDeEnvios_A_Tablas'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT RCAT.id
					,RCAT.ContextoId
					,RCAT.CuentaDeEnvioId
					,RCAT.TablaId
					,CAST(CX.Nombre AS VARCHAR) AS Contexto
					,CAST(CDE.Nombre AS VARCHAR) AS CuentaDeEnvio
					,CAST(T.Nombre AS VARCHAR) AS Tabla
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN RCAT.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN RCAT.id END DESC
							,CASE WHEN @OrdenarPor = 'ContextoId' AND @Sentido = '0' THEN RCAT.ContextoId END
							,CASE WHEN @OrdenarPor = 'ContextoId' AND @Sentido = '1' THEN RCAT.ContextoId END DESC
							,CASE WHEN @OrdenarPor = 'CuentaDeEnvioId' AND @Sentido = '0' THEN RCAT.CuentaDeEnvioId END
							,CASE WHEN @OrdenarPor = 'CuentaDeEnvioId' AND @Sentido = '1' THEN RCAT.CuentaDeEnvioId END DESC
							,CASE WHEN @OrdenarPor = 'TablaId' AND @Sentido = '0' THEN RCAT.TablaId END
							,CASE WHEN @OrdenarPor = 'TablaId' AND @Sentido = '1' THEN RCAT.TablaId END DESC
							,CASE WHEN @OrdenarPor = 'Contexto' AND @Sentido = '0' THEN CX.Nombre END
							,CASE WHEN @OrdenarPor = 'Contexto' AND @Sentido = '1' THEN CX.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'CuentaDeEnvio' AND @Sentido = '0' THEN CDE.Nombre END
							,CASE WHEN @OrdenarPor = 'CuentaDeEnvio' AND @Sentido = '1' THEN CDE.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Tabla' AND @Sentido = '0' THEN T.Nombre END
							,CASE WHEN @OrdenarPor = 'Tabla' AND @Sentido = '1' THEN T.Nombre END DESC
					) AS NumeroDeRegistro
			FROM RelAsig_CuentasDeEnvios_A_Tablas AS RCAT
				INNER JOIN Contextos CX ON CX.id = RCAT.ContextoId
				INNER JOIN CuentasDeEnvios CDE ON CDE.id = RCAT.CuentaDeEnvioId
				INNER JOIN Tablas T ON T.id = RCAT.TablaId
			WHERE
				(RCAT.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (RCAT.CuentaDeEnvioId = @CuentaDeEnvioId OR @CuentaDeEnvioId = '-1') -- VERIFICAR ESTE CAMPO
				AND (RCAT.TablaId = @TablaId OR @TablaId = '-1') -- VERIFICAR ESTE CAMPO
				AND (RCAT.ContextoId = @ContextoId OR @ContextoId = '-1')
				AND
				(
					(@Filtro = '')
					OR (RCAT.CuentaDeEnvioId LIKE '%' + @Filtro + '%')
					OR (RCAT.TablaId LIKE '%' + @Filtro + '%')
					OR (CX.Nombre LIKE '%' + @Filtro + '%')
					OR (CDE.Nombre LIKE '%' + @Filtro + '%')
					OR (T.Nombre LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_RelAsig_CuentasDeEnvios_A_Tablas__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_RelAsig_CuentasDeEnvios_A_Tablas__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_RelAsig_CuentasDeEnvios_A_Tablas__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@CuentaDeEnvioId                               INT = '-1' -- VERIFICAR ESTE CAMPO
	,@TablaId                                       INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'RelAsig_CuentasDeEnvios_A_Tablas'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT RCAT.id
					,CDE.Nombre
			FROM RelAsig_CuentasDeEnvios_A_Tablas AS RCAT
				INNER JOIN Contextos CX ON CX.id = RCAT.ContextoId
				INNER JOIN CuentasDeEnvios CDE ON CDE.id = RCAT.CuentaDeEnvioId
				INNER JOIN Tablas T ON T.id = RCAT.TablaId
			WHERE
				(RCAT.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (RCAT.CuentaDeEnvioId = @CuentaDeEnvioId OR @CuentaDeEnvioId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (RCAT.TablaId = @TablaId OR @TablaId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (RCAT.ContextoId = @ContextoId OR @ContextoId = '-1')
				)
				AND (
					(@Filtro = '')
					OR (CDE.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY CDE.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: RelAsig_CuentasDeEnvios_A_Tablas /Listados/ - FIN
 
 
 
 
-- SP-TABLA: RelAsig_Subsistemas_A_Publicaciones /Listados/ - INICIO
IF (OBJECT_ID('usp_RelAsig_Subsistemas_A_Publicaciones__Listado') IS NOT NULL) DROP PROCEDURE usp_RelAsig_Subsistemas_A_Publicaciones__Listado
GO
CREATE PROCEDURE usp_RelAsig_Subsistemas_A_Publicaciones__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@PublicacionId                                 INT = '-1' -- VERIFICAR ESTE CAMPO
	,@SubsistemaId                                  INT = '-1' -- VERIFICAR ESTE CAMPO
	,@UsuarioId                                     INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'RelAsig_Subsistemas_A_Publicaciones'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT ASAP.id
					,ASAP.SubsistemaId
					,ASAP.PublicacionId
					,ASAP.UsuarioId
					,ASAP.NumeroDeVersion
					,ASAP.SVN
					,ASAP.Ubicacion
					,ASAP.Observaciones
					,CAST(PUB.Fecha AS VARCHAR) AS Publicacion
					,CAST(SUBS.Nombre AS VARCHAR) AS Subsistema
					,U.Apellido + ', ' + U.Nombre AS Usuario
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN ASAP.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN ASAP.id END DESC
							,CASE WHEN @OrdenarPor = 'SubsistemaId' AND @Sentido = '0' THEN ASAP.SubsistemaId END
							,CASE WHEN @OrdenarPor = 'SubsistemaId' AND @Sentido = '1' THEN ASAP.SubsistemaId END DESC
							,CASE WHEN @OrdenarPor = 'PublicacionId' AND @Sentido = '0' THEN ASAP.PublicacionId END
							,CASE WHEN @OrdenarPor = 'PublicacionId' AND @Sentido = '1' THEN ASAP.PublicacionId END DESC
							,CASE WHEN @OrdenarPor = 'UsuarioId' AND @Sentido = '0' THEN ASAP.UsuarioId END
							,CASE WHEN @OrdenarPor = 'UsuarioId' AND @Sentido = '1' THEN ASAP.UsuarioId END DESC
							,CASE WHEN @OrdenarPor = 'NumeroDeVersion' AND @Sentido = '0' THEN ASAP.NumeroDeVersion END
							,CASE WHEN @OrdenarPor = 'NumeroDeVersion' AND @Sentido = '1' THEN ASAP.NumeroDeVersion END DESC
							,CASE WHEN @OrdenarPor = 'SVN' AND @Sentido = '0' THEN ASAP.SVN END
							,CASE WHEN @OrdenarPor = 'SVN' AND @Sentido = '1' THEN ASAP.SVN END DESC
							,CASE WHEN @OrdenarPor = 'Ubicacion' AND @Sentido = '0' THEN ASAP.Ubicacion END
							,CASE WHEN @OrdenarPor = 'Ubicacion' AND @Sentido = '1' THEN ASAP.Ubicacion END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN ASAP.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN ASAP.Observaciones END DESC
							,CASE WHEN @OrdenarPor = 'Publicacion' AND @Sentido = '0' THEN PUB.Fecha END
							,CASE WHEN @OrdenarPor = 'Publicacion' AND @Sentido = '1' THEN PUB.Fecha END DESC
							,CASE WHEN @OrdenarPor = 'Subsistema' AND @Sentido = '0' THEN SUBS.Nombre END
							,CASE WHEN @OrdenarPor = 'Subsistema' AND @Sentido = '1' THEN SUBS.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Usuario' AND @Sentido = '0' THEN U.Apellido END
							,CASE WHEN @OrdenarPor = 'Usuario' AND @Sentido = '0' THEN U.Nombre END
							,CASE WHEN @OrdenarPor = 'Usuario' AND @Sentido = '1' THEN U.Apellido END DESC
							,CASE WHEN @OrdenarPor = 'Usuario' AND @Sentido = '1' THEN U.Nombre END DESC
					) AS NumeroDeRegistro
			FROM RelAsig_Subsistemas_A_Publicaciones AS ASAP
				INNER JOIN Publicaciones PUB ON PUB.id = ASAP.PublicacionId
				INNER JOIN Subsistemas SUBS ON SUBS.id = ASAP.SubsistemaId
				INNER JOIN Usuarios U ON U.id = ASAP.UsuarioId
			WHERE
				(ASAP.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (ASAP.PublicacionId = @PublicacionId OR @PublicacionId = '-1') -- VERIFICAR ESTE CAMPO
				AND (ASAP.SubsistemaId = @SubsistemaId OR @SubsistemaId = '-1') -- VERIFICAR ESTE CAMPO
				AND (ASAP.UsuarioId = @UsuarioId OR @UsuarioId = '-1') -- VERIFICAR ESTE CAMPO
				AND
				(
					(@Filtro = '')
					OR (ASAP.SubsistemaId LIKE '%' + @Filtro + '%')
					OR (ASAP.PublicacionId LIKE '%' + @Filtro + '%')
					OR (ASAP.UsuarioId LIKE '%' + @Filtro + '%')
					OR (ASAP.NumeroDeVersion LIKE '%' + @Filtro + '%')
					OR (ASAP.SVN LIKE '%' + @Filtro + '%')
					OR (ASAP.Ubicacion LIKE '%' + @Filtro + '%')
					OR (ASAP.Observaciones LIKE '%' + @Filtro + '%')
					OR (PUB.Fecha LIKE '%' + @Filtro + '%')
					OR (SUBS.Nombre LIKE '%' + @Filtro + '%')
					OR (U.Apellido LIKE '%' + @Filtro + '%')
					OR (U.Nombre LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_RelAsig_Subsistemas_A_Publicaciones__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_RelAsig_Subsistemas_A_Publicaciones__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_RelAsig_Subsistemas_A_Publicaciones__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@PublicacionId                                 INT = '-1' -- VERIFICAR ESTE CAMPO
	,@SubsistemaId                                  INT = '-1' -- VERIFICAR ESTE CAMPO
	,@UsuarioId                                     INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'RelAsig_Subsistemas_A_Publicaciones'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT ASAP.id
					,PUB.Fecha
			FROM RelAsig_Subsistemas_A_Publicaciones AS ASAP
				INNER JOIN Publicaciones PUB ON PUB.id = ASAP.PublicacionId
				INNER JOIN Subsistemas SUBS ON SUBS.id = ASAP.SubsistemaId
				INNER JOIN Usuarios U ON U.id = ASAP.UsuarioId
			WHERE
				(ASAP.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (ASAP.PublicacionId = @PublicacionId OR @PublicacionId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (ASAP.SubsistemaId = @SubsistemaId OR @SubsistemaId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (ASAP.UsuarioId = @UsuarioId OR @UsuarioId = '-1') -- VERIFICAR ESTE CAMPO
				)
				AND (
					(@Filtro = '')
					OR (PUB.Fecha LIKE '%' + @Filtro + '%')
				)
			ORDER BY PUB.Fecha
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: RelAsig_Subsistemas_A_Publicaciones /Listados/ - FIN
 
 
 
 
-- SP-TABLA: RelAsig_TiposDeContactos_A_Contextos /Listados/ - INICIO
IF (OBJECT_ID('usp_RelAsig_TiposDeContactos_A_Contextos__Listado') IS NOT NULL) DROP PROCEDURE usp_RelAsig_TiposDeContactos_A_Contextos__Listado
GO
CREATE PROCEDURE usp_RelAsig_TiposDeContactos_A_Contextos__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@TipoDeContactoId                              INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'RelAsig_TiposDeContactos_A_Contextos'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT ATCAC.id
					,ATCAC.TipoDeContactoId
					,ATCAC.ContextoId
					,CAST(CX.Nombre AS VARCHAR) AS Contexto
					,CAST(TDC.Nombre AS VARCHAR) AS TipoDeContacto
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN ATCAC.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN ATCAC.id END DESC
							,CASE WHEN @OrdenarPor = 'TipoDeContactoId' AND @Sentido = '0' THEN ATCAC.TipoDeContactoId END
							,CASE WHEN @OrdenarPor = 'TipoDeContactoId' AND @Sentido = '1' THEN ATCAC.TipoDeContactoId END DESC
							,CASE WHEN @OrdenarPor = 'ContextoId' AND @Sentido = '0' THEN ATCAC.ContextoId END
							,CASE WHEN @OrdenarPor = 'ContextoId' AND @Sentido = '1' THEN ATCAC.ContextoId END DESC
							,CASE WHEN @OrdenarPor = 'Contexto' AND @Sentido = '0' THEN CX.Nombre END
							,CASE WHEN @OrdenarPor = 'Contexto' AND @Sentido = '1' THEN CX.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'TipoDeContacto' AND @Sentido = '0' THEN TDC.Nombre END
							,CASE WHEN @OrdenarPor = 'TipoDeContacto' AND @Sentido = '1' THEN TDC.Nombre END DESC
					) AS NumeroDeRegistro
			FROM RelAsig_TiposDeContactos_A_Contextos AS ATCAC
				INNER JOIN Contextos CX ON CX.id = ATCAC.ContextoId
				INNER JOIN TiposDeContactos TDC ON TDC.id = ATCAC.TipoDeContactoId
			WHERE
				(ATCAC.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (ATCAC.TipoDeContactoId = @TipoDeContactoId OR @TipoDeContactoId = '-1') -- VERIFICAR ESTE CAMPO
				AND (ATCAC.ContextoId = @ContextoId OR @ContextoId = '-1')
				AND
				(
					(@Filtro = '')
					OR (ATCAC.TipoDeContactoId LIKE '%' + @Filtro + '%')
					OR (CX.Nombre LIKE '%' + @Filtro + '%')
					OR (TDC.Nombre LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_RelAsig_TiposDeContactos_A_Contextos__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_RelAsig_TiposDeContactos_A_Contextos__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_RelAsig_TiposDeContactos_A_Contextos__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
	,@TipoDeContactoId                              INT = '-1' -- VERIFICAR ESTE CAMPO
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'RelAsig_TiposDeContactos_A_Contextos'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT ATCAC.id
					,TDC.Nombre
			FROM RelAsig_TiposDeContactos_A_Contextos AS ATCAC
				INNER JOIN Contextos CX ON CX.id = ATCAC.ContextoId
				INNER JOIN TiposDeContactos TDC ON TDC.id = ATCAC.TipoDeContactoId
			WHERE
				(ATCAC.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (ATCAC.TipoDeContactoId = @TipoDeContactoId OR @TipoDeContactoId = '-1') -- VERIFICAR ESTE CAMPO
					 AND (ATCAC.ContextoId = @ContextoId OR @ContextoId = '-1')
				)
				AND (
					(@Filtro = '')
					OR (TDC.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY TDC.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: RelAsig_TiposDeContactos_A_Contextos /Listados/ - FIN
 
 
 
 
-- SP-TABLA: Subsistemas /Listados/ - INICIO
IF (OBJECT_ID('usp_Subsistemas__Listado') IS NOT NULL) DROP PROCEDURE usp_Subsistemas__Listado
GO
CREATE PROCEDURE usp_Subsistemas__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'Subsistemas'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT SUBS.id
					,SUBS.Nombre
					,SUBS.Observaciones
					,SUBS.Activo
					,N'images/cbx/img_' + CONVERT(VARCHAR(5),SUBS.Activo) + N'.jpg' AS imgActivo
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN SUBS.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN SUBS.id END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN SUBS.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN SUBS.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN SUBS.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN SUBS.Observaciones END DESC
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '0' THEN SUBS.Activo END
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '1' THEN SUBS.Activo END DESC
					) AS NumeroDeRegistro
			FROM Subsistemas AS SUBS
			WHERE
				(SUBS.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (SUBS.Activo = @Activo OR @Activo IS NULL)
				AND
				(
					(@Filtro = '')
					OR (SUBS.Nombre LIKE '%' + @Filtro + '%')
					OR (SUBS.Observaciones LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_Subsistemas__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_Subsistemas__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_Subsistemas__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'Subsistemas'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT SUBS.id
					,SUBS.Nombre
			FROM Subsistemas AS SUBS
			WHERE
				(SUBS.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (SUBS.Activo = @Activo OR @Activo IS NULL)
				)
				AND (
					(@Filtro = '')
					OR (SUBS.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY SUBS.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: Subsistemas /Listados/ - FIN
 
 
 
 
-- SP-TABLA: TiposDeActores /Listados/ - INICIO
IF (OBJECT_ID('usp_TiposDeActores__Listado') IS NOT NULL) DROP PROCEDURE usp_TiposDeActores__Listado
GO
CREATE PROCEDURE usp_TiposDeActores__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'TiposDeActores'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT TDA.id
					,TDA.Nombre
					,TDA.Observaciones
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN TDA.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN TDA.id END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN TDA.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN TDA.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN TDA.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN TDA.Observaciones END DESC
					) AS NumeroDeRegistro
			FROM TiposDeActores AS TDA
			WHERE
				(TDA.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND
				(
					(@Filtro = '')
					OR (TDA.Nombre LIKE '%' + @Filtro + '%')
					OR (TDA.Observaciones LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_TiposDeActores__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_TiposDeActores__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_TiposDeActores__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'TiposDeActores'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT TDA.id
					,TDA.Nombre
			FROM TiposDeActores AS TDA
			WHERE
				(TDA.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
				)
				AND (
					(@Filtro = '')
					OR (TDA.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY TDA.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: TiposDeActores /Listados/ - FIN
 
 
 
 
-- SP-TABLA: TiposDeArchivos /Listados/ - INICIO
IF (OBJECT_ID('usp_TiposDeArchivos__Listado') IS NOT NULL) DROP PROCEDURE usp_TiposDeArchivos__Listado
GO
CREATE PROCEDURE usp_TiposDeArchivos__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'TiposDeArchivos'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT TDARCH.id
					,TDARCH.Nombre
					,TDARCH.Observaciones
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN TDARCH.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN TDARCH.id END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN TDARCH.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN TDARCH.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN TDARCH.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN TDARCH.Observaciones END DESC
					) AS NumeroDeRegistro
			FROM TiposDeArchivos AS TDARCH
			WHERE
				(TDARCH.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND
				(
					(@Filtro = '')
					OR (TDARCH.Nombre LIKE '%' + @Filtro + '%')
					OR (TDARCH.Observaciones LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_TiposDeArchivos__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_TiposDeArchivos__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_TiposDeArchivos__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'TiposDeArchivos'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT TDARCH.id
					,TDARCH.Nombre
			FROM TiposDeArchivos AS TDARCH
			WHERE
				(TDARCH.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
				)
				AND (
					(@Filtro = '')
					OR (TDARCH.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY TDARCH.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: TiposDeArchivos /Listados/ - FIN
 
 
 
 
-- SP-TABLA: TiposDeContactos /Listados/ - INICIO
IF (OBJECT_ID('usp_TiposDeContactos__Listado') IS NOT NULL) DROP PROCEDURE usp_TiposDeContactos__Listado
GO
CREATE PROCEDURE usp_TiposDeContactos__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'TiposDeContactos'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT TDC.id
					,TDC.Nombre
					,TDC.Observaciones
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN TDC.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN TDC.id END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN TDC.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN TDC.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN TDC.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN TDC.Observaciones END DESC
					) AS NumeroDeRegistro
			FROM TiposDeContactos AS TDC
			WHERE
				(TDC.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND
				(
					(@Filtro = '')
					OR (TDC.Nombre LIKE '%' + @Filtro + '%')
					OR (TDC.Observaciones LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_TiposDeContactos__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_TiposDeContactos__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_TiposDeContactos__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'TiposDeContactos'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT TDC.id
					,TDC.Nombre
			FROM TiposDeContactos AS TDC
			WHERE
				(TDC.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
				)
				AND (
					(@Filtro = '')
					OR (TDC.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY TDC.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: TiposDeContactos /Listados/ - FIN
 
 
 
 
-- SP-TABLA: TiposDeLogLogins /Listados/ - INICIO
IF (OBJECT_ID('usp_TiposDeLogLogins__Listado') IS NOT NULL) DROP PROCEDURE usp_TiposDeLogLogins__Listado
GO
CREATE PROCEDURE usp_TiposDeLogLogins__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'TiposDeLogLogins'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT TDLL.id
					,TDLL.ConCookie
					,TDLL.Nombre
					,TDLL.MensajeDeError
					,TDLL.Observaciones
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN TDLL.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN TDLL.id END DESC
							,CASE WHEN @OrdenarPor = 'ConCookie' AND @Sentido = '0' THEN TDLL.ConCookie END
							,CASE WHEN @OrdenarPor = 'ConCookie' AND @Sentido = '1' THEN TDLL.ConCookie END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN TDLL.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN TDLL.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'MensajeDeError' AND @Sentido = '0' THEN TDLL.MensajeDeError END
							,CASE WHEN @OrdenarPor = 'MensajeDeError' AND @Sentido = '1' THEN TDLL.MensajeDeError END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN TDLL.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN TDLL.Observaciones END DESC
					) AS NumeroDeRegistro
			FROM TiposDeLogLogins AS TDLL
			WHERE
				(TDLL.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND
				(
					(@Filtro = '')
					OR (TDLL.ConCookie LIKE '%' + @Filtro + '%')
					OR (TDLL.Nombre LIKE '%' + @Filtro + '%')
					OR (TDLL.MensajeDeError LIKE '%' + @Filtro + '%')
					OR (TDLL.Observaciones LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_TiposDeLogLogins__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_TiposDeLogLogins__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_TiposDeLogLogins__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'TiposDeLogLogins'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT TDLL.id
					,TDLL.Nombre
			FROM TiposDeLogLogins AS TDLL
			WHERE
				(TDLL.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
				)
				AND (
					(@Filtro = '')
					OR (TDLL.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY TDLL.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: TiposDeLogLogins /Listados/ - FIN
 
 
 
 
-- SP-TABLA: TiposDeOperaciones /Listados/ - INICIO
IF (OBJECT_ID('usp_TiposDeOperaciones__Listado') IS NOT NULL) DROP PROCEDURE usp_TiposDeOperaciones__Listado
GO
CREATE PROCEDURE usp_TiposDeOperaciones__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'TiposDeOperaciones'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT TDO.id
					,TDO.Nombre
					,TDO.Texto
					,TDO.Observaciones
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN TDO.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN TDO.id END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN TDO.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN TDO.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Texto' AND @Sentido = '0' THEN TDO.Texto END
							,CASE WHEN @OrdenarPor = 'Texto' AND @Sentido = '1' THEN TDO.Texto END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN TDO.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN TDO.Observaciones END DESC
					) AS NumeroDeRegistro
			FROM TiposDeOperaciones AS TDO
			WHERE
				(TDO.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND
				(
					(@Filtro = '')
					OR (TDO.Nombre LIKE '%' + @Filtro + '%')
					OR (TDO.Texto LIKE '%' + @Filtro + '%')
					OR (TDO.Observaciones LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_TiposDeOperaciones__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_TiposDeOperaciones__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_TiposDeOperaciones__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'TiposDeOperaciones'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT TDO.id
					,TDO.Nombre
			FROM TiposDeOperaciones AS TDO
			WHERE
				(TDO.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
				)
				AND (
					(@Filtro = '')
					OR (TDO.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY TDO.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: TiposDeOperaciones /Listados/ - FIN
 
 
 
 
-- SP-TABLA: TiposDeTareas /Listados/ - INICIO
IF (OBJECT_ID('usp_TiposDeTareas__Listado') IS NOT NULL) DROP PROCEDURE usp_TiposDeTareas__Listado
GO
CREATE PROCEDURE usp_TiposDeTareas__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'TiposDeTareas'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT TDT.id
					,TDT.ContextoId
					,TDT.Nombre
					,TDT.Observaciones
					,TDT.Activo
					,N'images/cbx/img_' + CONVERT(VARCHAR(5),TDT.Activo) + N'.jpg' AS imgActivo
					,CAST(CX.Nombre AS VARCHAR) AS Contexto
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN TDT.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN TDT.id END DESC
							,CASE WHEN @OrdenarPor = 'ContextoId' AND @Sentido = '0' THEN TDT.ContextoId END
							,CASE WHEN @OrdenarPor = 'ContextoId' AND @Sentido = '1' THEN TDT.ContextoId END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN TDT.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN TDT.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN TDT.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN TDT.Observaciones END DESC
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '0' THEN TDT.Activo END
							,CASE WHEN @OrdenarPor = 'Activo' AND @Sentido = '1' THEN TDT.Activo END DESC
							,CASE WHEN @OrdenarPor = 'Contexto' AND @Sentido = '0' THEN CX.Nombre END
							,CASE WHEN @OrdenarPor = 'Contexto' AND @Sentido = '1' THEN CX.Nombre END DESC
					) AS NumeroDeRegistro
			FROM TiposDeTareas AS TDT
				INNER JOIN Contextos CX ON CX.id = TDT.ContextoId
			WHERE
				(TDT.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND (TDT.Activo = @Activo OR @Activo IS NULL)
				AND (TDT.ContextoId = @ContextoId OR @ContextoId = '-1')
				AND
				(
					(@Filtro = '')
					OR (TDT.Nombre LIKE '%' + @Filtro + '%')
					OR (TDT.Observaciones LIKE '%' + @Filtro + '%')
					OR (CX.Nombre LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_TiposDeTareas__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_TiposDeTareas__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_TiposDeTareas__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'TiposDeTareas'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT TDT.id
					,TDT.Nombre
			FROM TiposDeTareas AS TDT
			WHERE
				(TDT.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
					 AND (TDT.Activo = @Activo OR @Activo IS NULL)
					 AND (TDT.ContextoId = @ContextoId OR @ContextoId = '-1')
				)
				AND (
					(@Filtro = '')
					OR (TDT.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY TDT.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: TiposDeTareas /Listados/ - FIN
 
 
 
 
-- SP-TABLA: Unidades /Listados/ - INICIO
IF (OBJECT_ID('usp_Unidades__Listado') IS NOT NULL) DROP PROCEDURE usp_Unidades__Listado
GO
CREATE PROCEDURE usp_Unidades__Listado
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@OrdenarPor                                    VARCHAR(50) = ''
	,@Sentido                                       BIT = 0
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@RegistrosPorPagina                            INT = '-1'
	,@NumeroDePagina                                INT = '1'
	,@TotalDeRegistros                              INT		OUTPUT
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'Unidades'
		,@FuncionDePagina VARCHAR(30) = 'Listado'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- Validación 1:[Mismo Contexto]: NO SE REALIZA, Ya que no hay un registro contra el que validar el Contexto; Pero luego en el listado se Filtra contra el Contexto del Usuario, realizando la validación 1 implicitamente.
	-- Validación 2:[Permisos sobre la tabla]: Se valida que el Usuario que ejecuta (@UsuarioQueEjecutaId) tiene permiso (Rol de Usaurio con permiso) para insertar (CargarLaPagina) registros en esta tabla (@Tabla).
	EXEC usp_VAL_AutorizadoA  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT * INTO #TempTable
			FROM
				(
					SELECT UD.id
					,UD.Codigo
					,UD.Nombre
					,UD.Observaciones
					,ROW_NUMBER() OVER
					(
						-- VER QUE PARA PONER VARIOS CAMPOS --> VARIAS LINEAS CON EL MISMO WHEN
						ORDER BY
							CASE WHEN @OrdenarPor = 'id' AND @Sentido = '0' THEN UD.id END
							,CASE WHEN @OrdenarPor = 'id' AND @Sentido = '1' THEN UD.id END DESC
							,CASE WHEN @OrdenarPor = 'Codigo' AND @Sentido = '0' THEN UD.Codigo END
							,CASE WHEN @OrdenarPor = 'Codigo' AND @Sentido = '1' THEN UD.Codigo END DESC
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '0' THEN UD.Nombre END
							,CASE WHEN @OrdenarPor = 'Nombre' AND @Sentido = '1' THEN UD.Nombre END DESC
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '0' THEN UD.Observaciones END
							,CASE WHEN @OrdenarPor = 'Observaciones' AND @Sentido = '1' THEN UD.Observaciones END DESC
					) AS NumeroDeRegistro
			FROM Unidades AS UD
			WHERE
				(UD.id > '0') -- No es necesario, pero para mantener estructura de los "AND" Siguientes.
				AND
				(
					(@Filtro = '')
					OR (UD.Codigo LIKE '%' + @Filtro + '%')
					OR (UD.Nombre LIKE '%' + @Filtro + '%')
					OR (UD.Observaciones LIKE '%' + @Filtro + '%')
				)
		) Query
 
		SELECT *
		FROM  #TempTable
			WHERE (@RegistrosPorPagina = -1) -- Sin Paginación
				OR -- Con Paginación:
				(NumeroDeRegistro BETWEEN ((@NumeroDePagina - 1) * @RegistrosPorPagina) + 1 AND @RegistrosPorPagina * (@NumeroDePagina))
 
			SET @TotalDeRegistros = (SELECT	COUNT(*) FROM  #TempTable)
			DROP TABLE #TempTable
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
 
 
 
 
IF (OBJECT_ID('usp_Unidades__ListadoDDLoCBXL') IS NOT NULL) DROP PROCEDURE usp_Unidades__ListadoDDLoCBXL
GO
CREATE PROCEDURE usp_Unidades__ListadoDDLoCBXL
	 @UsuarioQueEjecutaId                           INT
	,@FechaDeEjecucion                              DATETIME
 
	,@id                                            INT = '0'	 -- Default, Si pasa un id, lo agregamos al SELECT.
	,@Filtro                                        VARCHAR(50) = ''
	,@Activo                                        BIT = NULL -- EL MODELO NO TIENE ACTIVO, PERO LO PASAMOS POR COMPATIBILIDAD.
 
 
	,@sResSQL                                       VARCHAR(1000)	OUTPUT
AS
BEGIN TRY
	DECLARE @Tabla VARCHAR(80) = 'Unidades'
		,@FuncionDePagina VARCHAR(30) = 'ListadoDDL'
		,@AutorizadoA VARCHAR(30) = 'CargarLaPagina'
		,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
 
	-- EN LOS DDL NO se valida las autorizaciones contra los registros o tablas, ya que los pedidos son "cruzados" en estos casos, donde un usuario puede tener permiso en la tabla principal, pero no en las satelite (la del ListadoDDL) y sin embargo necesita listar para llenar la DDL.
	SET @sResSQL = '' -- Lo necesito para que no de error lo siguiente, si es NULL (Ya que quiero mantener el Formato).
 
	IF @sResSQL = ''
		BEGIN 
			DECLARE @ContextoId	INT
			EXEC	@ContextoId = [dbo].[ufc_ContextoDelUsuario] @UsuarioId = @UsuarioQueEjecutaId
 
			SELECT UD.id
					,UD.Nombre
			FROM Unidades AS UD
			WHERE
				(UD.id = @id) -- Si pasó un registro particular, lo agregamos al Select (Por ejemplo en un registro que está está seleccionado en el DDL, pero que actualmente está "Anulado".
				OR (	(1 = 1) -- Es un truco para mantener el formato del WHERE y que no dé error si no hay ninguna FK y además la tabla no tiene ContextoId ni Activo.
				)
				AND (
					(@Filtro = '')
					OR (UD.Nombre LIKE '%' + @Filtro + '%')
				)
			ORDER BY UD.Nombre
		END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: Unidades /Listados/ - FIN
 
 
 
 
-- -------------------------
-- SP: STORE PROCEDURES // DB_XXX__13b_Core__Listados Generados Automaticamente // FIN
-- =====================================================
