-- =====================================================
-- Descripción: ABMs Prioritarios
-- Script: 08a_Core__ABMs PrioritariosA_ControlYLogRegistros, LogErrores y LogRegistros.sql - INICIO
-- =====================================================

USE DB_ParticularCore
GO


		-- Tablas Involucradas: - INICIO
			-- #ControlYLogRegistros#
			-- #LogErroresSP#
			-- LogRegistros
		-- Tablas Involucradas: - FIN


		--Ignorar los siguientes Mensages (Se producen solo por el orden en el que se ejecutan):
			-- The module 'usp_ControlYLogRegistros__Insert' depends on the missing object 'usp_LogRegistros__Insert'. The module will still be created; however, it cannot run successfully until the object exists.
			-- The module 'usp_ControlYLogRegistros__Insert' depends on the missing object 'usp_LogErroresSP__Insert'. The module will still be created; however, it cannot run successfully until the object exists.
			-- The module 'usp_LogErrores__Update_by_@id' depends on the missing object 'usp_LogRegistros__Listado_HistoriaDeUnRegistro'. The module will still be created; however, it cannot run successfully until the object exists.




-- SP-TABLA: "Control" - INICIO
IF (OBJECT_ID('usp_ControlYLogRegistros__Insert') IS NOT NULL) DROP PROCEDURE usp_ControlYLogRegistros__Insert
GO
CREATE PROCEDURE usp_ControlYLogRegistros__Insert
		@UsuarioQueEjecutaId		INT
		,@FechaDeEjecucion			DATETIME
		,@Token						VARCHAR(40) = '' -- = '' cuando es desde una PC --> "sin dispositivo".
		
		,@Tabla						VARCHAR(80)
		,@RegistroId				INT			= '-1' -- Indica que no hay registro
		,@FuncionDePagina			VARCHAR(30)
		,@SP						VARCHAR(50)
		
		,@RegistrosAfectados		INT
		,@NumeroDeError				INT
		
		,@sResSQL					VARCHAR(1000)			OUTPUT
	AS
	BEGIN
		DECLARE @LineaDeError			INT = 0 -- Por default.
				,@Mensaje				VARCHAR(1000)	
				,@ErrorInconsistente	BIT = 0
			
		IF (@NumeroDeError = 0 AND @RegistrosAfectados > 0) --> Operación OK.
			BEGIN
				SET @sResSQL = '' -- Está OK. No miro el resultado de ingresar el LogRegistros, ya q si me da error, estaría confundiendo el resultado de la operación.
				
				EXEC usp_LogRegistros__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
					,@RegistroId = @RegistroId, @Token = @Token, @FuncionDePagina = @FuncionDePagina
			END
		ELSE -- Se produjo un error --> Lo registro.
			BEGIN
				IF (@NumeroDeError = 0 AND @RegistrosAfectados = 0) --> ERROR INCONSISTENTE, ES UNA CONTRADICCIÓN, NO DEBERÍA PASAR.
					BEGIN 
						SET @Mensaje = 'Error inconsistente, una contradicción: @NumeroDeError = 0 y @RegistrosAfectados = 0'
								+ ' // @Tabla = ' + @Tabla + ' // @RegistroId = ' + CAST(@RegistroId AS VARCHAR(MAX))
						SET @ErrorInconsistente = 1
					END
				ELSE
					-- IF (@NumeroDeError <> 0 AND @RegistrosAfectados = 0) --> Error, no se pudo concretar la operacion.
					BEGIN
						SET @Mensaje = 'sys.message: ' + COALESCE((SELECT Text FROM sys.messages AS m WHERE m.message_id = @NumeroDeError AND m.language_id = 3082), '')
								+ ' // @Tabla = ' + @Tabla + ' // @RegistroId = ' + CAST(@RegistroId AS VARCHAR(MAX))
					END
					
				EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
					,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
					,@NumeroDeError = @NumeroDeError, @ErrorInconsistente = @ErrorInconsistente, @sResSQL = @sResSQL OUTPUT
			END
	END
GO
-- SP-TABLA: "Control" - FIN




-- SP-TABLA: LogErrores - INICIO
IF (OBJECT_ID('usp_LogErroresSP__Insert') IS NOT NULL) DROP PROCEDURE usp_LogErroresSP__Insert
GO
-- Este LogDeErrores se carga desde otro SP --> Registra el Error en la BD y tb Devuelve el mensaje
CREATE PROCEDURE usp_LogErroresSP__Insert
		@UsuarioQueEjecutaId			INT							
		,@FechaDeEjecucion				DATETIME					
		
		,@Tabla							VARCHAR(80)
		,@RegistroId					INT			= '-1' -- Indica que no hay registro
		,@NumeroDeError					INT
		,@FuncionDePagina				VARCHAR(30)
		,@SP							VARCHAR(80)
		,@LineaDeError					INT
		,@Mensaje						VARCHAR(1000)				
		,@ErrorInconsistente			BIT = 0
		
		,@sResSQL						VARCHAR(1000)			OUTPUT
		--,@id							INT						OUTPUT	
	AS
	BEGIN
		-- hay errores no afectados por el TRY…CATCH: Warnings or informational messages that have a severity of 10 or lower.
		-- https://docs.microsoft.com/en-us/sql/t-sql/language-elements/try-catch-transact-sql?view=sql-server-2017
		
		-- Como la tabla originalmente se pensó para insertar los errores desde .NET, tiene otros campos.
		-- Ahora, van a comvivir ambas formas sobre la misma tabla; Para ello hacemos un "mapeo" de campos.
		--	DECLARE @TablaId				INT = (SELECT id FROM Tablas WHERE Nombre = @Tabla)	
			--,@Pagina					VARCHAR(100) = '' -- Indica que se registró directo desde SQL.
			--,@TipoDeOperacionId			INT = 0 -- Por defecto lo dejo en 0, Al tener el SP, en Nº de Error y la Linea, no lo necesito.
			--,@Modulo					VARCHAR(100) = 'Error Nº: ' + CAST(@NumeroDeError AS VARCHAR(MAX))				
			--,@Metodo					VARCHAR(50)	= @SP
			--,@Observaciones				VARCHAR(255) = 'Linea: ' + CAST(@LineaDeError AS VARCHAR(MAX))
		
		
		DECLARE @TipoDeOperacionId	INT = COALESCE((SELECT id FROM TiposDeOperaciones WHERE Nombre = @FuncionDepagina), 1) --DEFAULT
		
		IF (@ErrorInconsistente = 1)
			BEGIN
				SET @sResSQL = 'Se produjo un error. Avise a sistemas. [001]. ' -- Como es un error incoherente, no se sabe si se ejecuitó o no la acción.
			END
		ELSE
			BEGIN
				SET @sResSQL =	(
					CASE WHEN @NumeroDeError = 2627 OR @NumeroDeError = 2601 THEN 'No se puede ralizar la operación, ya existe un registro con los mismos "datos característicos" y produciría un registro "repetido". Corregir para continuar. [002]. '
					WHEN @NumeroDeError = 547 THEN 'No se puede ralizar la operación por violación en la integridad de datos (Respecto a un registro asociado de otra tabla // FK asociada). Avise a sistemas. [003]. '
					WHEN @NumeroDeError = 2627 THEN 'No se puede ralizar la operación por violación en la integridad de datos (Respecto a un registro asociado de otra tabla // FK asociada). Avise a sistemas. [004]. ' -- Handle unique constraint violation.
					ELSE '' END
				)
				IF (@sResSQL = '') -- No es ninguno de los errores específicos anteriores.
					BEGIN
						SET @sResSQL = (
							CASE 
								WHEN @TipoDeOperacionId = 2 THEN 'Se produjo un error, no se pudo agregar el registro. [005]. '
								WHEN @TipoDeOperacionId = 3 THEN 'Se produjo un error, no se pudo actualizar el registro. [006]. '
								WHEN @TipoDeOperacionId = 4 THEN 'Se produjo un error, no se pudo eliminar el registro. [007]. '
								WHEN @TipoDeOperacionId = 5 THEN 'Se produjo un error, no se pudo "anular" el registro. [008]. '
								WHEN @TipoDeOperacionId = 6 THEN 'Se produjo un error, no se pudo "activar" el registro. [009]. '
								ELSE 'Se produjo un error, no se pudo concretar la acción. [010]. ' END
						)
					END
			END
		
		IF @NumeroDeError = '50000' -- Viene del RaiseError que tiramos nosotros --> mostramos este mensaje al usuario.
			BEGIN
				SET @sResSQL = @sResSQL + @Mensaje -- Así registramos el mensaje de texto aquí, y le damos el mismo mensaje al usuario.
			END
		
		DECLARE @Observaciones VARCHAR(1000) = 'Mensaje dado al usuario: ' + @sResSQL
			
		--IF (@sResSQL <> '') -- VER SI REALMENTE LE AGREGAMOS ESTO.
		--	BEGIN
		--		SET @sResSQL = @sResSQL + ' Error específico: ' + COALESCE((SELECT Text FROM sys.messages AS m WHERE m.message_id = @NumeroDeError AND m.language_id = 3082), '')
		--	END
		
		--SET @Mensaje = 'sys.message: ' + COALESCE((SELECT Text FROM sys.messages AS m WHERE m.message_id = @NumeroDeError AND m.language_id = 3082), '') + @Mensaje
		
		DECLARE @TablaId INT = COALESCE((SELECT id FROM Tablas WHERE Nombre = @Tabla),1) --DEFAULT
		
		INSERT INTO LogErrores
		(
			UsuarioQueEjecutaId 
			,FechaDeEjecucion
			,TablaId 
			,TipoDeOperacionId
			,SP
			,NumeroDeError
			,LineaDeError
			,ErrorEnAmbienteSQL
			,Mensaje 
			,PaginaId
			--,Accion	DEFAULT NULL
			--,Capa	DEFAULT NULL
			--,Metodo	DEFAULT NULL
			--,MachineName	DEFAULT NULL
			,EstadoDeLogErrorId
			,Observaciones
		)
		VALUES
		(
			@UsuarioQueEjecutaId 
			,@FechaDeEjecucion
			,@TablaId 
			,@TipoDeOperacionId
			,@SP
			,@NumeroDeError
			,@LineaDeError
			,1 --Error en SQL
			,@Mensaje 
			,1 --@PaginaId  DEFAULT 1
			--,@Accion	DEFAULT NULL
			--,@Capa	DEFAULT NULL
			--,@Metodo	DEFAULT NULL
			--,@MachineName	DEFAULT NULL
			,1 --@EstadoDeLogErrorId DEFAULT 1
			,@Observaciones
		)
		
		--NO LO NECESITO: SET @id = SCOPE_IDENTITY() -- Por compatibilidad.
		--VA EL MENSAJE ARMADO: SET @sResSQL = '' -- Por compatibilidad.
	END
GO




IF (OBJECT_ID('usp_LogErrores__Insert') IS NOT NULL) DROP PROCEDURE usp_LogErrores__Insert
GO
-- Este LogDeErrores se carga desde .NET
CREATE PROCEDURE usp_LogErrores__Insert
		@UsuarioQueEjecutaId			INT							
		,@FechaDeEjecucion				DATETIME					
		
		,@Tabla							VARCHAR(80)
		,@SP							VARCHAR(80) = NULL
		,@NumeroDeError					INT = NULL
		,@LineaDeError					INT = NULL
		,@Mensaje						VARCHAR(1000)
		,@Pagina						VARCHAR(100)
		,@Accion						VARCHAR(80)
		,@Capa							VARCHAR(80)
		,@Metodo						VARCHAR(80)
		,@MachineName					VARCHAR(80)
		
		,@sResSQL						VARCHAR(1000)			OUTPUT
		,@id							INT						OUTPUT	
	AS
	BEGIN
		DECLARE @PaginaId INT = COALESCE((SELECT id FROM Paginas WHERE Nombre = @Pagina),1) --DEFAULT
		DECLARE @TablaId INT = COALESCE((SELECT id FROM Tablas WHERE Nombre = @Tabla),1) --DEFAULT
		DECLARE @TipoDeOperacionId INT = COALESCE((SELECT id FROM TiposDeOperaciones WHERE Nombre = @Accion),1) --DEFAULT
		
		-- Esto es para corregir más adelante
		SET @Mensaje = @Mensaje + ' // @Pagina = ' + @Pagina
		
		INSERT INTO LogErrores
		(
			UsuarioQueEjecutaId 
			,FechaDeEjecucion
			,TablaId 
			,TipoDeOperacionId
			,SP
			,NumeroDeError
			,LineaDeError
			,ErrorEnAmbienteSQL
			,Mensaje 
			,PaginaId
			,Accion
			,Capa
			,Metodo
			,MachineName
			,EstadoDeLogErrorId
			--,Observaciones DEFAULT NULL
		)
		VALUES
		(
			@UsuarioQueEjecutaId 
			,@FechaDeEjecucion
			,@TablaId 
			,@TipoDeOperacionId
			,@SP
			,@NumeroDeError
			,@LineaDeError
			,0 -- error en .Net
			,@Mensaje 
			,@PaginaId
			,@Accion
			,@Capa
			,@Metodo
			,@MachineName
			,1 -- @EstadoDeLogErrorId DEFAULT 1
			--,@Observaciones DEFAULT NULL
		)
		
		SET @id = SCOPE_IDENTITY() -- Por compatibilidad.
		SET @sResSQL = '' -- Por compatibilidad.
		--EXEC	@sResSQL = [dbo].ufc_ResultadoOperacion__Insert  @RegistrosAfectados = @@ROWCOUNT		
	END
GO




IF (OBJECT_ID('usp_LogErrores__Update_by_@id') IS NOT NULL) DROP PROCEDURE usp_LogErrores__Update_by_@id
GO
CREATE PROCEDURE usp_LogErrores__Update_by_@id
		@id							INT							
		
		,@UsuarioQueEjecutaId		INT							
		,@FechaDeEjecucion			DATETIME					
		,@Token						VARCHAR(40) = '' -- = '' cuando es desde una PC --> "sin dispositivo".
		
		,@EstadoDeLogErrorId		INT
		,@Observaciones				VARCHAR(1000)
		
		,@sResSQL					VARCHAR(1000)			OUTPUT		
	AS
	BEGIN TRY
		DECLARE @Tabla VARCHAR(80) = 'LogErrores'
			,@FuncionDePagina VARCHAR(30) = 'Update'
			,@AutorizadoA VARCHAR(30) = 'OperarLaPagina'
			,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
			
		EXEC usp_VAL_UsuarioPerteneceAlContextoDelRegistro  @UsuarioId = @UsuarioQueEjecutaId, @Tabla = @Tabla, @RegistroId = @id, @sResSQL = @sResSQL OUTPUT
		IF (@sResSQL = '')  -- VERIFICO SI TIENE PERMISO P ESTA ACCIÓN
			BEGIN
				EXEC usp_VAL_AutorizadoA_ConReg  @UsuarioId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla, @FuncionDePagina = @FuncionDePagina, @AutorizadoA = @AutorizadoA, @sResSQL = @sResSQL OUTPUT, @RegistroId = @id
			END

		IF @sResSQL = ''
			BEGIN
				DECLARE @Historia	VARCHAR(1000)
				EXEC usp_LogRegistros__Listado_HistoriaDeUnRegistro  @RegistroId = @id, @Tabla = @Tabla, @Historia = @Historia OUTPUT
				
				UPDATE LogErrores
				SET	
					EstadoDeLogErrorId = @EstadoDeLogErrorId
					,Observaciones = @Observaciones
				FROM LogErrores
				WHERE id = @id
		
				-- Revisamos el resultado, so OK --> registra el LogRegistros, si falla --> Resgistra el LogError y devuelve el mensaje correcto.
				EXEC usp_ControlYLogRegistros__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
					,@RegistroId = @id, @Token = @Token, @FuncionDePagina = @FuncionDePagina, @SP = @SP, @RegistrosAfectados = @@ROWCOUNT
					,@NumeroDeError = @@ERROR, @sResSQL = @sResSQL OUTPUT
			END
	END TRY
	BEGIN CATCH
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
	END CATCH
GO
-- SP-TABLA: LogErrores - FIN




-- SP-TABLA: LogRegistros - INICIO
IF (OBJECT_ID('usp_LogRegistros__Insert') IS NOT NULL) DROP PROCEDURE usp_LogRegistros__Insert
GO
CREATE PROCEDURE usp_LogRegistros__Insert
		@UsuarioQueEjecutaId			INT
		,@FechaDeEjecucion				DATETIME
		,@Token							VARCHAR(40) = '' -- = '' cuando es desde una PC --> "sin dispositivo".
		
		,@Tabla							VARCHAR(80)
		,@RegistroId					INT
		,@FuncionDePagina				VARCHAR(30)
	AS
	BEGIN
		DECLARE @TablaId INT = COALESCE((SELECT id FROM Tablas WHERE Nombre = @Tabla),1) --DEFAULT
		DECLARE @TipoDeOperacionId INT = COALESCE((SELECT id FROM TiposDeOperaciones WHERE Nombre = @FuncionDePagina),1) --DEFAULT
		DECLARE @LogLoginDeDispositivoId INT = COALESCE((SELECT id FROM LogLoginsDeDispositivos WHERE Token = @Token),1) --DEFAULT = 1, Esto lo mete en el LogRegistros
		
		SET NOCOUNT ON
		INSERT INTO LogRegistros
		(
			UsuarioQueEjecutaId
			,FechaDeEjecucion
			,TablaId
			,RegistroId
			,LogLoginDeDispositivoId
			,TipoDeOperacionId
		)
		VALUES
		(
			@UsuarioQueEjecutaId
			,@FechaDeEjecucion
			,@TablaId
			,@RegistroId
			,@LogLoginDeDispositivoId
			,@TipoDeOperacionId
		)
	END
GO




IF (OBJECT_ID('usp_LogRegistros__Listado_HistoriaDeUnRegistro') IS NOT NULL) DROP PROCEDURE usp_LogRegistros__Listado_HistoriaDeUnRegistro
GO
CREATE PROCEDURE usp_LogRegistros__Listado_HistoriaDeUnRegistro
		@RegistroId					INT
		,@Tabla						VARCHAR(80)	
		,@Historia					VARCHAR(1000)	OUTPUT
	AS
	BEGIN TRY
		DECLARE --@Tabla VARCHAR(80) = ''
			@FuncionDePagina VARCHAR(30) = 'Cargar Historia'
			--,@AutorizadoA VARCHAR(30) = ''
			,@SP VARCHAR(80) = OBJECT_NAME(@@PROCID)
			,@TablaId INT = (SELECT id FROM Tablas WHERE Nombre = @Tabla)
		
		CREATE TABLE #LogTemp
		(
			id_Temp	INT		PRIMARY KEY IDENTITY(1, 1)	NOT NULL
			,Dato	VARCHAR(200)
		)
		
		--IF @RegistroCodigo = '-1'
			BEGIN
				INSERT INTO #LogTemp (Dato)
				-- La siguiente línea es SIN contexto
				-- SELECT  '<p>' +  TDOp.Texto + N' en la Fecha: ' + CAST(LREG.FechaDeEjecucion AS VARCHAR(MAX)) + N'  Por: ' + U.Apellido + N', ' + U.Nombre + N' (' + U.UserName + N')' + ' ' + '</p>' AS Dato		
				-- La siguiente línea es CON contexto
				SELECT  '<p>' +  TDOp.Texto + N' en la Fecha: ' + CAST(LREG.FechaDeEjecucion AS VARCHAR(MAX)) + N'  Por: ' + U.Apellido + N', ' + U.Nombre + N' (' + U.UserName + N'@' + CON.Codigo + N')</p>' AS Dato		
				FROM LogRegistros LREG
					INNER JOIN Usuarios U ON LREG.UsuarioQueEjecutaId = U.id
					INNER JOIN TiposDeOperaciones TDOp ON LREG.TipoDeOperacionId = TDOp.id
					-- Descomentar la siguiente línea para CON contexto, o comentarla para SIN
					INNER JOIN Contextos CON ON CON.id = U.ContextoId
				WHERE (RegistroId = @RegistroId AND TablaId = @TablaId)
				ORDER BY LREG.FechaDeEjecucion
			END
		--ELSE
		--	BEGIN
		--		INSERT INTO #LogTemp (Dato)
		--		-- La siguiente línea es SIN contexto
		--		-- SELECT  '<p>' +  TDOp.Texto + N' en la Fecha: ' + CAST(LREG.FechaDeEjecucion AS VARCHAR(MAX)) + N'  Por: ' + U.Apellido + N', ' + U.Nombre + N' (' + U.UserName + N')</p>' AS Dato		
		--		-- La siguiente línea es CON contexto
		--		SELECT  '<p>' +  TDOp.Texto + N' en la Fecha: ' + CAST(LREG.FechaDeEjecucion AS VARCHAR(MAX)) + N'  Por: ' + U.Apellido + N', ' + U.Nombre + N' (' + U. UserName + N'@' + CON.Codigo + N')</p>' AS Dato		
		--		FROM LogRegistros LREG
		--			INNER JOIN Usuarios U ON LREG.UsuarioQueEjecutaId = U.id
		--			INNER JOIN TiposDeOperaciones TDOp ON LREG.TipoDeOperacionId = TDOp.id
		--			-- Descomentar la siguiente línea para CON contexto, o comentarla para SIN
		--			INNER JOIN Contextos CON ON CON.id = U.ContextoId 
						
		--		WHERE (RegistroCodigo = @RegistroCodigo AND TablaId = @TablaId)
		--		ORDER BY LREG.FechaDeEjecucion
		--	END
		--ENDIF
		
		DECLARE @id_Temp INt = 1
		DECLARE @NumeroDeFilas  INT = (SELECT COUNT(0) FROM #LogTemp)
		
		--DECLARE @Dato AS VARCHAR(100)
		IF @NumeroDeFilas > 0 
			WHILE @id_Temp <= @NumeroDeFilas
				BEGIN
					--SET @Dato = (SELECT Dato FROM #LogTemp WHERE id_Temp = @id_Temp)
					--SET @sResSQL = COALESCE(@sResSQL + ', ', '') + @Dato
					SET @Historia = COALESCE(@Historia + '', '') + (SELECT Dato FROM #LogTemp WHERE id_Temp = @id_Temp)
					SET @id_Temp = @id_Temp + 1
				END
			-- END WHILE 	
		ELSE
			BEGIN
				SET @Historia = 'El Registro no tiene "historia".'
			END
		--ENDIF
		-- DROP TABLE #LogTemp
		--RETURN @sResSQL
	
	END TRY
	BEGIN CATCH
		-- ESTE CATCH ES ESPECIAL:
		DECLARE @UsuarioQueEjecutaId INT = 1, @FechaDeEjecucion DATE = GetDate(), @sResSQL VARCHAR(1000)
		
		DECLARE @NumeroDeError INT = ERROR_NUMBER(), @LineaDeError INT = ERROR_LINE(), @Mensaje VARCHAR(1000) = ERROR_MESSAGE()
		EXEC usp_LogErroresSP__Insert  @UsuarioQueEjecutaId = @UsuarioQueEjecutaId, @FechaDeEjecucion = @FechaDeEjecucion, @Tabla = @Tabla
			,@FuncionDePagina = @FuncionDePagina, @SP = @SP, @LineaDeError = @LineaDeError, @Mensaje = @Mensaje
			,@NumeroDeError = @NumeroDeError, @sResSQL = @sResSQL OUTPUT
			
		SET @Historia = 'Se produjo un error, y no se puede mostrar la "historia" del registro.'
	END CATCH
GO
-- SP-TABLA: LogRegistros - FIN




-- ---------------------------------
-- Script: 08a_Core__ABMs PrioritariosA_ControlYLogRegistros, LogErrores y LogRegistros.sql - FIN
-- =====================================================